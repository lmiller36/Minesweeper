{"version":3,"sources":["actions.js","Constants.js","utils.js","Minesweeper/Minesweeper.js","reducers.js","store.js","Logo.js","selectors.js","Pages/MainMenu/MainMenu.js","Pages/GameSetup/GameSetup.js","Pages/InGame/Timer.js","Pages/InGame/InGameMenu.js","Minesweeper/ImageUrls.js","Minesweeper/TileImageFactory.js","Minesweeper/Tile.js","Pages/InGame/Game.js","Pages/InGame/GameDisplay.js","Minesweeper/DemoTile.js","Pages/HowToPlay/HowToPlay.js","App.js","index.js"],"names":["toggleGameMode","now","type","payload","startGame","difficulty","switchPages","PAGE","EASY","rows","cols","numBombs","key","MEDIUM","HARD","DIFFICULTIES","ALL_PAGES","random","seed","Math","x","sin","floor","capitalize","s","charAt","toUpperCase","slice","toLowerCase","bombTile","isBomb","tile","genNonBombs","numTiles","includeIndex","toInsert","tiles","count","push","index","MinesweeperGame","gameDifficulty","initialClick","RANDOM_SEED","game","keys","Object","this","opened","Set","board","forEach","isOpened","add","bombs","nonBombs","remaining","gameOver","didWin","createBoard","clickTile","pos","indexToPos","totalTiles","genBombs","numSafe","isCorner","isOnAnEdge","randomSafe","randomizeBoard","arr","i","length","j","shuffle","concat","finishedBoard","Array","map","fill","iterateOverNeighbors","coords","y","iterateOverRowsCols","row","col","status","posToArrIndex","calculateBombNumberForEachTile","callback","xDelta","yDelta","numEdgesOfPos","left","right","top","bottom","total","trunc","updateTileStatus","openNonBombNeighbors","tileIndex","curr","flaggedState","isFlagged","numFlagged","tileToOpen","neighborsWithFlags","indexWithinBounds","has","size","win","min","decrementUsed","lose","initialState","gameProps","isPaused","timeElapsed","isSet","tutorialPage","gameIndex","pages","reducers","data","state","action","page","gameMode","update","shouldRerender","newMode","loss","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","LogoContainer","styled","div","LogoText","p","connect","dispatch","openMainMenu","onClick","style","fontFamily","fontSize","margin","cursor","getTimeElapsed","getBoard","plsRerender","getGame","getIsSet","getGameMode","getGameDifficulty","isPageSelected","previousGameExists","getWin","getLoss","changed","ownProps","getTile","getTutorialGameIndex","MainMenuContainer","props","inSetupMode","StyledMainMenuButton","continuePreviousGame","inMainMenu","setupNewGame","continueGame","switchToInGame","showHowToPlay","display","marginTop","className","GameSetupContainer","localRemoveCachedBoard","newDifficulty","switchToGame","msg","id","name","value","selectedValue","gameDifficultySelector","document","querySelectorAll","difficultyOption","checked","startNewGame","TimerWrapper","firstPause","inGame","inGameFirstClick","updateTimer","setTimeout","InGameMenuWrapper","remainingBombs","mainMenu","toggledPause","icon","faHome","faFlag","faMousePointer","faPlay","faPause","faRedo","HINT_TILES","BombImage","url","OpenedImage","FlaggedImage","UnopenedImage","timeImageFactory","createImage","TileImage","TileWrapper","click","position","zIndex","opacity","first","GameWrapper","rerender","performInitialSetup","newGame","firstClick","updateBoard","removeCachedBoard","setDifficulty","window","addEventListener","event","isClicked","openNeighbors","unopenedTileClick","flagTile","flagClick","initialTileClick","Win","Loss","title","src","width","height","frameBorder","allowFullScreen","textAlign","DemoTile","showFlag","border","color","DemoBoard","emptyBoard","moves","boards","tilesToHighlight","moveCount","tileToHighlight","demoBoardMessages","inHowToPlay","tutorialGameIndex","setTutorialGameIndex","TypesOfTiles","justifyContent","child","faArrowCircleLeft","faArrowCircleRight","Pages","pageLoadedSetup","onLoad","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.cc94925c.chunk.js","sourcesContent":["export const PAGE_LOADED_SETUP = 'PAGE_LOADED_SETUP';\r\nexport const pageLoadedSetup = () => ({\r\n    type: PAGE_LOADED_SETUP,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const initializeBoard = (game) => ({\r\n    type: INITIALIZE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const updateBoard = () => ({\r\n    type: UPDATE_BOARD,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const REMOVE_CACHED_BOARD = 'REMOVE_CACHED_BOARD';\r\nexport const removeCachedBoard = () => ({\r\n    type: REMOVE_CACHED_BOARD,\r\n    payload: {},\r\n});\r\n\r\nexport const TOGGLE_PAUSE_GAME = 'TOGGLE_PAUSE_GAME';\r\nexport const togglePauseGame = () => ({\r\n    type: TOGGLE_PAUSE_GAME,\r\n    payload: {},\r\n});\r\n\r\nexport const END_GAME = 'END_GAME';\r\nexport const endGame = (didWin) => ({\r\n    type: END_GAME,\r\n    payload: {didWin},\r\n});\r\n\r\n\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const updateTimer = (timeElapsed) => ({\r\n    type: UPDATE_TIMER,\r\n    payload: { timeElapsed },\r\n});\r\n\r\nexport const TOGGLE_GAME_MODE = 'TOGGLE_GAME_MODE';\r\nexport const toggleGameMode = (now) => ({\r\n    type: TOGGLE_GAME_MODE,\r\n    payload: { now },\r\n});\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const startGame = (difficulty) => ({\r\n    type: START_GAME,\r\n    payload: { difficulty },\r\n});\r\n\r\nexport const CONTINUE_GAME = 'CONTINUE_GAME';\r\nexport const continueGame = () => ({\r\n    type: CONTINUE_GAME,\r\n    payload: {  },\r\n});\r\n\r\nexport const SWITCH_PAGES = 'SWITCH_PAGES';\r\nexport const switchPages = (PAGE) => ({\r\n    type: SWITCH_PAGES,\r\n    payload: { PAGE },\r\n});\r\n\r\nexport const SET_TUTORIAL_GAME_INDEX = 'SET_TUTORIAL_GAME_INDEX';\r\nexport const setTutorialGameIndex = (index) => ({\r\n    type: SET_TUTORIAL_GAME_INDEX,\r\n    payload: { index },\r\n});\r\n\r\n\r\n","\r\nexport const EASY = {\r\n    rows: 9,\r\n    cols: 9,\r\n    numBombs: 3,\r\n    key: \"EASY\"\r\n};\r\n\r\nexport const MEDIUM = {\r\n    rows: 16,\r\n    cols: 16,\r\n    numBombs: 40,\r\n    key: \"MEDIUM\"\r\n};\r\n\r\nexport const HARD = {\r\n    rows: 30,\r\n    cols: 16,\r\n    numBombs: 99,\r\n    key: \"HARD\"\r\n};\r\n\r\nexport const DIFFICULTIES = {\r\n    \"EASY\": EASY,\r\n    \"MEDIUM\": MEDIUM,\r\n    \"HARD\": HARD,\r\n}\r\n\r\n// Page States\r\nexport const MAIN_MENU = \"MAIN_MENU\";\r\nexport const SETUP_NEW_GAME = \"SETUP_NEW_GAME\";\r\nexport const IN_GAME_FIRST_CLICK = \"IN_GAME_FIRST_CLICK\";\r\nexport const IN_GAME = \"IN_GAME\";\r\nexport const HOW_TO_PLAY = \"HOW_TO_PLAY\"\r\n\r\nexport const ALL_PAGES = [MAIN_MENU, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK, IN_GAME, HOW_TO_PLAY];","function random(seed) {\r\n    if(!seed) seed = Math.random();\r\n    var x = Math.sin(seed++) * 10000;\r\n    return x - Math.floor(x);\r\n}\r\n\r\nexport function shuffle(arr, RANDOM_SEED) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(random(RANDOM_SEED) * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function capitalize(s) {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n}","/* eslint-disable complexity */\r\nimport { shuffle } from '../utils';\r\n\r\nconst bombTile = {\r\n    type: 'bomb',\r\n};\r\n\r\n// const safeTile = {\r\n//     type: 'safe',\r\n// };\r\n\r\nfunction isBomb(tile) {\r\n    return tile.type === 'bomb';\r\n}\r\n\r\nclass MinesweeperGame {\r\n    constructor(gameDifficulty, initialClick, RANDOM_SEED, game) {\r\n\r\n        if (game != null) {\r\n\r\n            let keys = Object.keys(game);\r\n\r\n            for (let index in keys) {\r\n                let key = keys[index];\r\n                this[key] = game[key];\r\n            }\r\n\r\n            this.opened = new Set();\r\n            game.board.forEach(tile=>{if(tile.isOpened) this.opened.add(tile.index)})\r\n            return;\r\n        }\r\n\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = numBombs;\r\n        this.nonBombs = (rows * cols) - numBombs;\r\n        this.remaining = (rows * cols) - numBombs;\r\n        this.opened = new Set();\r\n        this.gameOver = false;\r\n        this.didWin = false;\r\n\r\n        if (this.bombs === 0) {\r\n            this.board = genNonBombs(rows * cols);\r\n        } else {\r\n            this.board = this.createBoard(gameDifficulty, initialClick, RANDOM_SEED);\r\n            this.clickTile(this.board[initialClick]);\r\n        }\r\n    }\r\n\r\n    createBoard(gameDifficulty, initialClick, RANDOM_SEED) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n\r\n        const pos = this.indexToPos(initialClick, cols);\r\n        const totalTiles = rows * cols;\r\n        const bombs = genBombs(numBombs);\r\n\r\n        let numSafe = 9;\r\n\r\n        if (this.isCorner(pos, rows, cols)) {\r\n            numSafe = 4;\r\n        } else if (this.isOnAnEdge(pos, rows, cols)) {\r\n            numSafe = 6;\r\n        }\r\n\r\n        const randomSafe = genNonBombs(totalTiles - numSafe - numBombs);\r\n        const randomizeBoard = shuffle(bombs.concat(randomSafe), RANDOM_SEED);\r\n\r\n        const finishedBoard = [...Array(rows)].map(() => Array(cols).fill(0));\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            finishedBoard[coords.y][coords.x] = {};\r\n        });\r\n\r\n        let index = 0;\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!finishedBoard[row][col]) {\r\n                finishedBoard[row][col] = randomizeBoard[index];\r\n                index++;\r\n            }\r\n\r\n            finishedBoard[row][col] = {\r\n                ...finishedBoard[row][col],\r\n                status: 0,\r\n                index: this.posToArrIndex({ x: col, y: row }, cols),\r\n                numBombs: 0,\r\n            };\r\n        });\r\n\r\n\r\n        this.calculateBombNumberForEachTile(finishedBoard, rows, cols);\r\n\r\n        return [].concat(...finishedBoard);\r\n    }\r\n\r\n    iterateOverNeighbors(pos, callback) {\r\n        for (let xDelta = -1; xDelta <= 1; xDelta++) {\r\n            for (let yDelta = -1; yDelta <= 1; yDelta++) {\r\n                const coords = { x: pos.x + xDelta, y: pos.y + yDelta };\r\n                if (coords.x < 0 || coords.x >= this.cols) {\r\n                    continue;\r\n                }\r\n                if (coords.y < 0 || coords.y >= this.rows) {\r\n                    continue;\r\n                }\r\n                callback(coords);\r\n            }\r\n        }\r\n    }\r\n\r\n    iterateOverRowsCols(callback) {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.cols; col++) {\r\n                callback(row, col);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateBombNumberForEachTile(finishedBoard, rows, cols) {\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!isBomb(finishedBoard[row][col])) {\r\n                return;\r\n            }\r\n            const pos = { x: col, y: row };\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                finishedBoard[coords.y][coords.x].numBombs += 1;\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    posToArrIndex(pos, cols) {\r\n        return pos.y * cols + pos.x;\r\n    }\r\n\r\n    isCorner(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) === 2;\r\n    }\r\n\r\n    numEdgesOfPos(pos, rows, cols) {\r\n        const left = pos.y === 0;\r\n        const right = pos.y === cols - 1;\r\n        const top = pos.x === 0;\r\n        const bottom = pos.x === rows - 1;\r\n\r\n        let total = 0;\r\n        if (left || right) total++;\r\n        if (top || bottom) total++;\r\n\r\n        return total;\r\n    }\r\n\r\n    isOnAnEdge(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) > 0;\r\n    }\r\n\r\n\r\n\r\n    indexToPos(index, cols) {\r\n        const y = Math.trunc(index / cols);\r\n        const x = index - y * cols;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    clickTile(tile) {\r\n        this.updateTileStatus(tile.index);\r\n        this.openNonBombNeighbors(tile);\r\n    }\r\n\r\n    flagTile(tileIndex) {\r\n        const curr = this.board[tileIndex];\r\n        const flaggedState = curr.isFlagged;\r\n        curr.isFlagged = !flaggedState;\r\n        this.updateTileStatus(tileIndex);\r\n    }\r\n\r\n    indexWithinBounds(index) {\r\n        return index >= 0 && index < this.rows * this.cols;\r\n    }\r\n\r\n    isFlagged(index) {\r\n        return this.board[index].isFlagged;\r\n    }\r\n\r\n    neighborsWithFlags(tile) {\r\n        let numFlagged = 0;\r\n        this.iterateOverNeighbors(this.indexToPos(tile.index, this.cols), (coords) => {\r\n            const index = this.posToArrIndex(coords, this.cols);\r\n            if (this.isFlagged(index)) {\r\n                numFlagged++;\r\n            }\r\n        });\r\n\r\n        return numFlagged;\r\n    }\r\n\r\n    openNeighbors(tileToOpen) {\r\n        const numFlagged = this.neighborsWithFlags(tileToOpen);\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n\r\n        if (numFlagged === tileToOpen.numBombs) {\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                const index = this.posToArrIndex(coords, this.cols);\r\n\r\n                if (this.indexWithinBounds(index)) {\r\n                    const tile = this.board[index];\r\n                    if (this.isFlagged(index)) {\r\n                        return;\r\n                    }\r\n                    if (tile.isOpened) {\r\n                        return;\r\n                    }\r\n                    this.clickTile(tile);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    decrementUsed(index) {\r\n        if (!this.opened.has(index)) {\r\n            this.remaining--;\r\n        }\r\n        this.opened.add(index);\r\n        if (this.opened.size === this.nonBombs) {\r\n            this.win();\r\n            return;\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        return this.gameOver;\r\n    }\r\n\r\n    win() {\r\n        this.gameOver = true;\r\n        this.didWin = true;\r\n    }\r\n\r\n    lose() {\r\n        this.gameOver = true;\r\n    }\r\n\r\n    updateTileStatus(index) {\r\n        var min = 1;\r\n        if (this.board[index].status) min = this.board[index].status;\r\n        this.board[index].status = min + 1;\r\n    }\r\n\r\n    openNonBombNeighbors(tileToOpen) {\r\n        this.updateTileStatus(tileToOpen.index);\r\n\r\n        if (tileToOpen.type === 'bomb') {\r\n            this.lose();\r\n            return;\r\n        }\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n        if (tileToOpen.isOpened) {\r\n            return;\r\n        }\r\n        this.board[tileToOpen.index].isOpened = true;\r\n\r\n\r\n        this.decrementUsed(tileToOpen.index);\r\n\r\n        if (tileToOpen.numBombs && tileToOpen.numBombs > 0) {\r\n            return;\r\n        }\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            const tileToOpen = this.board[this.posToArrIndex(coords, this.cols)];\r\n            if (isBomb(tileToOpen)) {\r\n                return;\r\n            }\r\n\r\n            this.openNonBombNeighbors(tileToOpen);\r\n        });\r\n    }\r\n}\r\n\r\nfunction genNonBombs(numTiles, includeIndex, toInsert) {\r\n    const tiles = [];\r\n\r\n\r\n    for (let count = 0; count < numTiles; count++) {\r\n        tiles.push({\r\n            ...toInsert,\r\n            index: count,\r\n        });\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\n\r\n\r\nfunction genBombs(numBombs) {\r\n    const bombs = [];\r\n\r\n    for (let count = 0; count < numBombs; count++) {\r\n        bombs.push(bombTile);\r\n    }\r\n\r\n    return bombs;\r\n}\r\n\r\nexport default MinesweeperGame;","import {\r\n    INITIALIZE_BOARD,\r\n    REMOVE_CACHED_BOARD,\r\n    UPDATE_BOARD,\r\n    UPDATE_TIMER,\r\n    TOGGLE_GAME_MODE,\r\n    START_GAME,\r\n    PAGE_LOADED_SETUP,\r\n    SWITCH_PAGES,\r\n    TOGGLE_PAUSE_GAME,\r\n    END_GAME,\r\n    SET_TUTORIAL_GAME_INDEX,\r\n    CONTINUE_GAME\r\n} from './actions';\r\nimport { EASY, MAIN_MENU, ALL_PAGES } from './Constants';\r\nimport MinesweeperGame from './Minesweeper/Minesweeper';\r\n\r\n\r\n\r\nconst initialState = {\r\n    gameProps: {\r\n        difficulty: EASY,\r\n        isPaused: false,\r\n        game: {\r\n            board: []\r\n        },\r\n        timeElapsed: 0,\r\n        isSet: false,\r\n    },\r\n    tutorialPage: {\r\n        gameIndex: 0,\r\n    },\r\n    pages: {}\r\n};\r\n\r\nexport const data = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case PAGE_LOADED_SETUP: {\r\n            ALL_PAGES.forEach(page => {\r\n                state.pages[page] = false;\r\n            })\r\n            state.pages[MAIN_MENU] = true;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            }\r\n        }\r\n\r\n        case INITIALIZE_BOARD: {\r\n            const { game } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                    isSet: true,\r\n                    update: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        case UPDATE_BOARD: {\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    // shouldRerender: state.gameProps.shouldRerender + 1,\r\n                }\r\n            };\r\n        }\r\n\r\n        case UPDATE_TIMER: {\r\n            const { timeElapsed } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    timeElapsed: timeElapsed,\r\n                }\r\n            };\r\n        }\r\n\r\n        case TOGGLE_PAUSE_GAME: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    isPaused: !state.gameProps.isPaused,\r\n                }\r\n            }\r\n        }\r\n\r\n        case REMOVE_CACHED_BOARD: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    isSet: false,\r\n                    game: {\r\n                        board: [],\r\n                    },\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                },\r\n            };\r\n        }\r\n\r\n        case TOGGLE_GAME_MODE: {\r\n            const newMode = state.gameProps.gameMode === 'clicking' ? 'flagging' : 'clicking';\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: newMode,\r\n                }\r\n            };\r\n        }\r\n\r\n        case START_GAME: {\r\n            const { difficulty } = payload;\r\n\r\n            const game = new MinesweeperGame({\r\n                ...difficulty,\r\n                numBombs: 0,\r\n            }, null);\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    difficulty: difficulty,\r\n                    game: game,\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                }\r\n            };\r\n        }\r\n\r\n        case SWITCH_PAGES: {\r\n            const { PAGE } = payload;\r\n\r\n            ALL_PAGES.forEach((page) => {\r\n                state[\"pages\"][page] = page === PAGE;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case END_GAME: {\r\n            const { didWin } = payload;\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    win: didWin,\r\n                    loss: !didWin,\r\n                }\r\n            };\r\n        }\r\n\r\n        case SET_TUTORIAL_GAME_INDEX: {\r\n            const { index } = payload;\r\n            return {\r\n                ...state,\r\n                tutorialPage: {\r\n                    gameIndex: index,\r\n                }\r\n            }\r\n        }\r\n\r\n        case CONTINUE_GAME: {\r\n\r\n            const game = new MinesweeperGame(state.gameProps.difficulty, null, null, state.gameProps.game);\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                }\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { data } from './reducers';\r\n\r\nconst reducers = {\r\n    data,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () =>\r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport './Shared.css';\r\nimport { switchPages } from './actions';\r\nimport { MAIN_MENU } from './Constants';\r\n\r\nconst LogoContainer = styled.div`\r\n    width:100%;\r\n    background:lightgray;\r\n    text-align:center;\r\n    font-style: italic;\r\n`;\r\n\r\nconst LogoText = styled.p`\r\n`;\r\n\r\nconst Logo = ({ openMainMenu }) => (\r\n    <LogoContainer >\r\n        <LogoText onClick={openMainMenu} style={{ fontFamily: 'Pacifico', fontSize: 'xxx-large', margin: '0px 0px 10px', cursor: 'pointer' }}>Lorne's Minesweeper</LogoText>\r\n    </LogoContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    openMainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Logo);","export const getTimeElapsed = (state) => {\r\n    return state.data.gameProps.timeElapsed;\r\n}\r\n\r\nexport const isPaused = (state) => {\r\n    return state.data.gameProps.isPaused;\r\n}\r\n\r\nexport const getBoard = (state) => {\r\n    return state.data.gameProps.game.board;\r\n};\r\n\r\nexport const plsRerender = (state) => {\r\n    return state.data.gameProps.shouldRerender;\r\n};\r\n\r\nexport const getGame = (state) => {\r\n    return state.data.gameProps.game;\r\n};\r\n\r\nexport const getIsSet = (state) => {\r\n    return state.data.gameProps.isSet;\r\n};\r\n\r\nexport const getStartTime = (state) => {\r\n    return state.data.gameProps.startTime;\r\n};\r\n\r\nexport const getCurrentTime = (state) => {\r\n    return state.data.gameProps.now;\r\n};\r\n\r\nexport const getGameMode = (state) => {\r\n    return state.data.gameProps.gameMode;\r\n};\r\n\r\nexport const getGameDifficulty = (state) => {\r\n    return state.data.gameProps.difficulty;\r\n};\r\n\r\nexport const isPageSelected = (state, page) => {\r\n    return state.data.pages[page];\r\n}\r\n\r\nexport const previousGameExists = (state) => {\r\n    return state.data.gameProps.game.board.length > 0;\r\n}\r\n\r\nexport const getRemainingBombs = (state) => {\r\n    return 0;\r\n}\r\nexport const getWin = (state) => {\r\n    return state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const getLoss = (state) => {\r\n    return !state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const gameOver = (state) => {\r\n    return state.data.gameProps.game.gameOver;\r\n}\r\n\r\nexport const changed = (state, ownProps) => {\r\n    return state.data.gameProps.game.board[ownProps.index].status;\r\n}\r\n\r\nexport const getTile = (state, ownProps) => {\r\n    return state.data.gameProps.game.board[ownProps.index];\r\n}\r\n\r\nexport const getTutorialGameIndex = (state) => {\r\n    return state.data.tutorialPage.gameIndex;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    isPageSelected,\r\n    previousGameExists,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { switchPages, continueGame } from '../../actions';\r\nimport { MAIN_MENU, IN_GAME, SETUP_NEW_GAME, HOW_TO_PLAY } from '../../Constants';\r\nimport './Buttons.css'\r\n\r\nconst MainMenuContainer = styled.div`\r\n    display:${props => !!props.inSetupMode ? \"none\" : \"inline-grid\"};\r\n`;\r\n\r\nconst StyledMainMenuButton = styled.div`\r\n`;\r\n\r\n\r\nconst MainMenu = ({ continuePreviousGame, inSetupMode, setupNewGame, inMainMenu, continueGame, switchToInGame, showHowToPlay }) => {\r\n\r\n    return <div style={{ display: inMainMenu ? \"\" : \"none\", marginTop: \"20px\" }}>\r\n\r\n        <MainMenuContainer inSetupMode={inSetupMode}>\r\n            <StyledMainMenuButton className=\"button\" onClick={() => { continueGame(); switchToInGame(); }} style={{ display: `${continuePreviousGame ? \"\" : \"none\"}` }} ><span>Continue Game </span></StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" onClick={setupNewGame}><span>New Game </span></StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" ><span>Settings</span> </StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" onClick={showHowToPlay}> <span>How To Play </span> </StyledMainMenuButton>\r\n        </MainMenuContainer>\r\n    </div >\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    continuePreviousGame: previousGameExists(state) && !gameOver(state),\r\n    inMainMenu: isPageSelected(state, MAIN_MENU),\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setupNewGame: () => dispatch(switchPages(SETUP_NEW_GAME)),\r\n    continueGame: () => dispatch(continueGame()),\r\n    switchToInGame: () => dispatch(switchPages(IN_GAME)),\r\n    showHowToPlay: () => dispatch(switchPages(HOW_TO_PLAY)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { EASY, MEDIUM, HARD, DIFFICULTIES, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport { removeCachedBoard, startGame, switchPages } from '../../actions';\r\nimport {\r\n    isPageSelected,\r\n} from '../../selectors';\r\n\r\nimport './GameSetup.css'\r\n\r\nimport { capitalize } from '../../utils'\r\n\r\nconst GameSetupContainer = styled.div`\r\n    display: ${props => props.inSetupMode ? \"inline-grid\" : \"none\"};\r\n`;\r\n\r\n\r\nconst GameSetup = ({ localRemoveCachedBoard, startGame, inSetupMode, switchToGame }) => {\r\n\r\n\r\n    const startNewGame = () => {\r\n\r\n        const gameDifficultySelector = document.querySelectorAll('input[name=\\'gameDifficulty\\']');\r\n        let selectedValue;\r\n        for (const difficultyOption of gameDifficultySelector) {\r\n            if (difficultyOption.checked) {\r\n                selectedValue = difficultyOption.value;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let gameDifficulty = null;\r\n\r\n        if (selectedValue === EASY.key) {\r\n            gameDifficulty = EASY;\r\n        }\r\n        else if (selectedValue === MEDIUM.key) {\r\n            gameDifficulty = MEDIUM;\r\n        } else if (selectedValue === HARD.key) {\r\n            gameDifficulty = HARD;\r\n        }\r\n\r\n        if (gameDifficulty) {\r\n            localRemoveCachedBoard();\r\n            startGame(gameDifficulty);\r\n            switchToGame();\r\n        }\r\n    }\r\n\r\n    return <GameSetupContainer inSetupMode={inSetupMode} style={{ marginTop: 20 }}>\r\n        {\r\n            Object.keys(DIFFICULTIES).map((key) => {\r\n                const difficulty = DIFFICULTIES[key];\r\n                const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`\r\n                return <label key={key} className=\"container\">{msg}\r\n                    <input type=\"radio\" id={key} name=\"gameDifficulty\" value={key} />\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n            })\r\n        }\r\n\r\n        <div id=\"testbutton\" onClick={() => {\r\n            startNewGame();\r\n        }}></div>\r\n\r\n    </GameSetupContainer>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    startGame: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n    switchToGame: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameSetup);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    isPaused,\r\n    getTimeElapsed,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\n\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nimport { updateTimer } from \"../../actions\";\r\n\r\nconst TimerWrapper = styled.div``;\r\n\r\nlet firstPause = false;\r\n\r\nconst Timer = ({ timeElapsed, isPaused, updateTimer, inGame, inGameFirstClick, gameOver }) => {\r\n\r\nif (gameOver) return <div>{timeElapsed}</div>;\r\n\r\n    let incrementTimer = () => {\r\n        setTimeout(() => {\r\n            if (inGame && !isPaused && !firstPause)\r\n                updateTimer(timeElapsed + 1);\r\n        }, 1000)\r\n    };\r\n\r\n    if (inGame && !isPaused)\r\n        incrementTimer();\r\n    else if (inGameFirstClick)\r\n        updateTimer(0);\r\n\r\n    if (!isPaused) firstPause = false;\r\n    else if (!firstPause && isPaused) {\r\n        firstPause = true;\r\n    }\r\n\r\n    return <TimerWrapper>{timeElapsed}</TimerWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeElapsed: getTimeElapsed(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    inGameFirstClick: isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateTimer: (timeElapsed) => dispatch(updateTimer(timeElapsed)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { faMousePointer, faFlag, faRedo, faHome, faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    getGame,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    getRemainingBombs,\r\n    isPaused,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport {\r\n    startGame,\r\n    removeCachedBoard,\r\n    toggleGameMode,\r\n    switchPages,\r\n    togglePauseGame,\r\n\r\n} from '../../actions'\r\nimport Timer from './Timer';\r\nimport { MAIN_MENU, IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nconst InGameMenuWrapper = styled.div`\r\n    display:flex;\r\n    margin:15px;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst InGameMenu = ({\r\n    gameMode, isPaused, gameDifficulty, toggleGameMode, inGameFirstClick, localRemoveCachedBoard, startGame, mainMenu, remainingBombs, toggledPause, inGame, gameOver\r\n}) => {\r\n\r\n    return <InGameMenuWrapper>\r\n        <FontAwesomeIcon size='2x' icon={faHome} onClick={() => { mainMenu() }} />\r\n        <Timer />\r\n        <div>{remainingBombs}</div>\r\n\r\n        <FontAwesomeIcon\r\n            size='2x'\r\n            style={{ display: `${!gameOver ? \"\" : \"none\"}` }}\r\n            icon={gameMode === 'flagging' ? faFlag : faMousePointer}\r\n            onClick={\r\n                () => {\r\n                    toggleGameMode();\r\n                }\r\n            }\r\n        />\r\n\r\n        <FontAwesomeIcon style={{ display: `${inGame && !gameOver ? \"\" : \"none\"}` }} size='2x' icon={isPaused ? faPlay : faPause} onClick={toggledPause} />\r\n\r\n        <FontAwesomeIcon size='2x' icon={faRedo} onClick={() => {\r\n            localRemoveCachedBoard();\r\n            inGameFirstClick();\r\n            startGame(gameDifficulty);\r\n        }} />\r\n\r\n    </InGameMenuWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    game: getGame(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    remainingBombs: getRemainingBombs(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    mainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n    startGame: (gameDifficulty) => dispatch(startGame(gameDifficulty)),\r\n    inGameFirstClick: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggledPause: () => dispatch(togglePauseGame()),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InGameMenu);","/* eslint-disable max-len */\r\nexport const BOMB_TILE = 'https://apprecs.org/ios/images/app-icons/256/e7/451931111.jpg';\r\nexport const HINT_TILES = [\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Minesweeper_0.svg/2000px-Minesweeper_0.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Minesweeper_1.svg/2000px-Minesweeper_1.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Minesweeper_2.svg/2000px-Minesweeper_2.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Minesweeper_3.svg/2000px-Minesweeper_3.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Minesweeper_4.svg/2000px-Minesweeper_4.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Minesweeper_5.svg/2000px-Minesweeper_5.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Minesweeper_6.svg/2000px-Minesweeper_6.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Minesweeper_7.svg/2000px-Minesweeper_7.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Minesweeper_8.svg/2000px-Minesweeper_8.svg.png',\r\n];\r\n\r\nexport const FLAG_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Minesweeper_flag.svg/2000px-Minesweeper_flag.svg.png';\r\nexport const UNOPENED_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Minesweeper_unopened_square.svg/1024px-Minesweeper_unopened_square.svg.png';","/* eslint-disable complexity */\r\n/* eslint-disable func-style */\r\n\r\nimport styled from 'styled-components';\r\nimport { BOMB_TILE, HINT_TILES, FLAG_TILE, UNOPENED_TILE } from './ImageUrls';\r\n\r\nconst BombImage = function () {\r\n    this.url = BOMB_TILE;\r\n};\r\n\r\nconst OpenedImage = function (numBombs) {\r\n    this.url = HINT_TILES[numBombs];\r\n};\r\n\r\nconst FlaggedImage = function () {\r\n    this.url = FLAG_TILE;\r\n};\r\n\r\nconst UnopenedImage = function () {\r\n    this.url = UNOPENED_TILE;\r\n};\r\n\r\nfunction TileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (tile.isOpened && tile.type === 'bomb') {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nconst timeImageFactory = new TileImageFactory();\r\n\r\nconst TileImage = styled.div`\r\ncontent: url(${(props) => {\r\n        return timeImageFactory.createImage(props.tile);\r\n    }});\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nexport default TileImage;","/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TileImage from './TileImageFactory';\r\nimport { connect } from 'react-redux';\r\nimport { getTile, changed } from '../selectors';\r\n\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst Tile = ({ tile, gameMode, click }) => {\r\n\r\n    return <TileWrapper\r\n        onClick={() => {\r\n            click(tile);\r\n        }}>\r\n\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${gameMode === 'flagging' && !tile.isOpened && !tile.isFlagged ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    tile: getTile(state, ownProps),\r\n    changed: changed(state, ownProps),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Tile);\r\n\r\n// export default Tile;","/* eslint-disable react/prop-types */\r\n\r\nimport React from 'react';\r\nimport Tile from '../../Minesweeper/Tile';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    getBoard,\r\n    getIsSet,\r\n    getGame,\r\n    plsRerender,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    isPaused,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { initializeBoard, updateBoard, removeCachedBoard, toggleGameMode, startGame, switchPages, } from '../../actions';\r\n\r\nimport MinesweeperGame from '../..//Minesweeper/Minesweeper';\r\nimport { IN_GAME } from '../../Constants';\r\n\r\nlet emptyBoard = null;\r\n\r\nlet first = true;\r\n\r\nconst GameWrapper = styled.div`\r\n    display: inline-grid;\r\n    visibility: ${props => props.isPaused ? \"hidden\" : \"\"};\r\n    grid-template-columns: repeat(${props => props.gameDifficulty ? props.gameDifficulty.cols : 0},1fr);\r\n`;\r\n\r\nconst Game = ({\r\n    // state\r\n    game, isSet, gameMode, gameDifficulty, isPaused, gameOver,\r\n    // actions\r\n    performInitialSetup, updateBoard, firstClick, toggleGameMode,\r\n}) => {\r\n\r\n    if (first && isSet) {\r\n        window.addEventListener('keydown', (event) => {\r\n            if (event.key === 'F' || event.key === 'f') {\r\n                if (gameOver) return;\r\n                toggleGameMode();\r\n            }\r\n        }, false);\r\n        first = false;\r\n    }\r\n\r\n    const initialTileClick = (tile) => {\r\n        const newGame = new MinesweeperGame(gameDifficulty, tile.index);\r\n        performInitialSetup(newGame);\r\n        firstClick();\r\n    };\r\n\r\n    const bombClick = () => {\r\n        game.lose();\r\n    };\r\n\r\n    const unopenedTileClick = (tile) => {\r\n        game.clickTile(tile);\r\n        updateBoard();\r\n    }\r\n\r\n    const flagClick = (tile) => {\r\n        game.flagTile(tile.index);\r\n        updateBoard();\r\n    };\r\n\r\n    const openNeighbors = (tile) => {\r\n        game.openNeighbors(tile);\r\n        updateBoard();\r\n    };\r\n\r\n    function isClicked(tile) {\r\n        if (tile && tile.isOpened) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return <GameWrapper isPaused={isPaused} gameDifficulty={gameDifficulty}>\r\n        {\r\n            game.board.length === 0 ? <div></div> :\r\n                game.board.map((tile) => {\r\n                    return <Tile\r\n                        key={tile.index}\r\n                        index={tile.index}\r\n                        gameMode={gameMode}\r\n                        click={\r\n                            (tile) => {\r\n                                if (gameOver) return;\r\n\r\n                                if (!isSet) {\r\n                                    initialTileClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (isClicked(tile)) {\r\n                                    openNeighbors(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (gameMode === 'flagging') {\r\n                                    flagClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (tile.isFlagged) {\r\n                                    return;\r\n                                }\r\n                                if (tile.type === 'bomb') {\r\n                                    bombClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                unopenedTileClick(tile);\r\n                            }\r\n                        }\r\n                    />;\r\n                })\r\n        }\r\n    </GameWrapper>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    isPaused: isPaused(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    performInitialSetup: (newGame) => dispatch(initializeBoard(newGame)),\r\n    firstClick: () => dispatch(switchPages(IN_GAME)),\r\n    updateBoard: () => dispatch(updateBoard()),\r\n    removeCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport InGameMenu from './InGameMenu';\r\nimport Game from './Game';\r\nimport { isPageSelected, getWin, getLoss, gameOver } from '../../selectors';\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Win = styled.div`\r\n    display:${props => props.win ? \"\" : \"none\"};\r\n`;\r\n\r\nconst Loss = styled.div`\r\n    display:${props => props.loss ? \"\" : \"none\"};\r\n`;\r\n\r\nconst GameDisplay = ({\r\n    inGame, win, loss\r\n}) => {\r\n\r\n\r\n\r\n    return <div style={{ display: inGame ? \"inline-block\" : \"none\" }} >\r\n        <InGameMenu />\r\n        <Win win={win}>\r\n            <iframe title=\"winGIF\" src=\"https://giphy.com/embed/peAFQfg7Ol6IE\" width=\"480\" height=\"455\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You found all the bombs!! (You win)</p>\r\n        </Win>\r\n        <Loss loss={loss}>\r\n            <iframe title=\"lossGIF\" src=\"https://giphy.com/embed/oe33xf3B50fsc\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You clicked a bomb!</p>\r\n        </Loss>\r\n        <Game />\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inGame: isPageSelected(state, IN_GAME) || isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    win: getWin(state),\r\n    loss: getLoss(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameDisplay);","/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TileImage from './TileImageFactory';\r\n\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst DemoTile = ({ tile, showFlag }) => {\r\n\r\n    return <TileWrapper\r\n        style={{ border: tile.color ? `${tile.color} 3px solid` : \"\" }}\r\n    >\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${showFlag ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\nexport default DemoTile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { DIFFICULTIES, EASY, HOW_TO_PLAY } from '../../Constants';\r\nimport { capitalize } from '../../utils';\r\nimport './HowToPlay.css';\r\nimport MinesweeperGame from '../../Minesweeper/Minesweeper';\r\nimport DemoTile from '../../Minesweeper/DemoTile';\r\nimport { faArrowCircleLeft, faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    isPageSelected,\r\n    getTutorialGameIndex,\r\n} from '../../selectors';\r\n\r\nimport {\r\n    setTutorialGameIndex\r\n} from '../../actions';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst DemoBoard = styled.div`\r\n    display: inline-grid;\r\n    grid-template-columns: repeat(${EASY.cols},1fr);\r\n`;\r\n\r\nlet emptyBoard = new MinesweeperGame({\r\n    ...EASY,\r\n    numBombs: 0,\r\n}, null).board;\r\n\r\nconst moves = [\r\n    (game) => { game.flagTile(5) },\r\n    (game) => { game.flagTile(41) },\r\n    (game) => { game.clickTile(game.board[50]) },\r\n    (game) => { game.openNeighbors(game.board[50]) },\r\n    (game) => { game.flagTile(22) },\r\n    (game) => { game.flagTile(31) },\r\n    (game) => { game.flagTile(61) },\r\n    (game) => { game.openNeighbors(game.board[14]) },\r\n    (game) => { game.openNeighbors(game.board[23]) },\r\n    (game) => { game.openNeighbors(game.board[53]) },\r\n    (game) => { game.openNeighbors(game.board[62]) },\r\n    (game) => { game.openNeighbors(game.board[70]) },\r\n    (game) => { game.flagTile(68) },\r\n    (game) => { game.openNeighbors(game.board[59]) },\r\n    (game) => { game.openNeighbors(game.board[77]) },\r\n    (game) => { game.clickTile(game.board[21]) },\r\n    (game) => { game.clickTile(game.board[57]) },\r\n    (game) => { game.clickTile(game.board[30]) },\r\n    (game) => { game.openNeighbors(game.board[30]) },\r\n    (game) => { game.flagTile(12) },\r\n    (game) => { game.flagTile(48) },\r\n    (game) => { game.openNeighbors(game.board[11]) },\r\n    (game) => { game.openNeighbors(game.board[47]) },\r\n    (game) => { game.openNeighbors(game.board[57]) },\r\n    (game) => { game.openNeighbors(game.board[56]) },\r\n    (game) => { game.flagTile(54) },\r\n    (game) => { game.flagTile(75) },\r\n    (game) => { game.openNeighbors(game.board[64]) },\r\n    (game) => { game.openNeighbors(game.board[65]) },\r\n];\r\n\r\n\r\nlet movesForEachDemoBoard = [\r\n    { moves: 0, tilesToHighlight: [{ index: 25, color: \"blue\" }] },\r\n    { moves: 2 },\r\n    { moves: 3 },\r\n    { moves: 4 },\r\n    { moves: 7 },\r\n    { moves: 12 },\r\n    { moves: 13 },\r\n    { moves: 15 },\r\n    { moves: 16 },\r\n    { moves: 17 },\r\n    { moves: 18 },\r\n    { moves: 19 },\r\n    { moves: 21 },\r\n    { moves: 25 },\r\n    { moves: 27 },\r\n    { moves: 29 }\r\n];\r\n\r\nconst SEED = 123123;\r\nemptyBoard[25].color = \"blue\";\r\nlet boards = [emptyBoard];\r\n\r\nmovesForEachDemoBoard.map((moveCount) => {\r\n    let game = new MinesweeperGame(EASY, 25, SEED);\r\n    for (let i = 0; i < moveCount; i++) {\r\n        moves[i](game);\r\n    }\r\n\r\n\r\n    let board = game.board;\r\n\r\n    if (moveCount.tilesToHighlight) {\r\n        moveCount.tilesToHighlight.forEach(tileToHighlight => {\r\n            board[tileToHighlight.index].color = tileToHighlight.color;\r\n        })\r\n    }\r\n\r\n    boards.push(board)\r\n})\r\n\r\nlet demoBoardMessages = [\r\n    \"The first click on the board is always safe, so you can click any of the empty tiles to start. To get a maximum amount of open tiles, a non-edge tile is recommended. We chose to click the highlighted tile\",\r\n    \"After the first click, a board may look like this, Certain tiles on this board can already be determined to be bombs. Can you see which?\",\r\n    \"Since the tiles with a one inside are next to only 1 non-opened tiles, the unopened tile MUST be a bomb. As such they are flagged\",\r\n    \"When all of a tile's bomb count is met, the remaining tiles must be safe. These can be opened by pressing the unopened tile or by clicking the hint tile. WARNING: If you click a bomb tile or a hint tile with incorrectly flagged tiles, you will detonate a bomb and lose!\",\r\n    \"Now, we have removed all the tiles known to not be bombs. In doing so, we have revealed additional tiles known to be bombs.\",\r\n    \"Three new flags (aka bombs) have been added. This is because the red three and the green two were adjacent to 3 and 2 unopened tiles respectively. As such, we know that those tiles must be bombs. With these flags we can opened some safe tiles.\",\r\n    \"All safe tiles have been opened. Go back if it is unclear which were opened. We can now flag an additionbothal time. Can you see which?\",\r\n    \"The green two here, after opening safe tiles, became adjacent to only two unopened tiles, as such both of these tiles must be bombs. We can now open some additional tiles\",\r\n    \"After opening the safe tiles, we may appear to be stuck, however, there is a strategy that may be of use. Look at the highlighted tiles. The top two has one known bomb and two unopened tiles adjacent to it. We do not know which of these two unopened tiles is the bomb, yet one of them must be. While the specific tile is not known, the red three below is adjacent to both of these candidate bomb tiles. This red three is already next to two known bombs, so while two of its neighbors may be a bomb, the last remaining tile CANNOT be a bomb. Therefore, the last tile must be safe.\",\r\n    \"With the same logic in mind, we know another tile that is safe to click. \",\r\n    \"1\",\r\n    \"2\",\r\n    \"1\",\r\n    \"2\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n]\r\n\r\nconst showBoard = (board) => {\r\n    return (\r\n        <DemoBoard>\r\n            {\r\n\r\n                board.map((tile) => {\r\n                    return <DemoTile\r\n                        key={tile.index + \"_empty\"}\r\n                        index={tile.index}\r\n                        tile={tile}\r\n                        // color={tile.color}\r\n                    />;\r\n                })\r\n            }\r\n        </DemoBoard>\r\n    );\r\n}\r\n\r\nconst HowToPlay = ({ inHowToPlay, tutorialGameIndex, setTutorialGameIndex }) => {\r\n\r\n    const TypesOfTiles = [];\r\n    TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: false }} />, msg: \"Unopened\" });\r\n    for (let i = 0; i <= 8; i++) {\r\n        TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: true, numBombs: i }} />, msg: `${i} bombs` });\r\n    }\r\n\r\n    TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: true, type: \"bomb\" }} />, msg: `Bomb tile` });\r\n\r\n    return <div style={{ display: inHowToPlay ? \"inline-block\" : \"none\", width: \"1000px\" }}>\r\n        <h1>How To Play Minesweeper(IN PROGRESS OF BEING BUILT)</h1>\r\n        <span>The objective of Minesweeper is to clear all tiles on the game board that do not contain a bomb (hence the name Minesweeper).</span>\r\n        <p>There are 3 classic difficulting settings:</p>\r\n        <ul>\r\n            {\r\n                Object.keys(DIFFICULTIES).map((key) => {\r\n                    const difficulty = DIFFICULTIES[key];\r\n                    const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`\r\n                    return <li key={key} className=\"container\">{msg} </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <h2>1. Types of tiles</h2>\r\n        <p>The game board will consists of the following types</p>\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n            {\r\n                TypesOfTiles.map(child => {\r\n                    return <div>\r\n                        {child.tile}\r\n                        <p>{child.msg} </p>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <p>The number tiles reflect the number of bombs in an adjacent tile (including diagonals)</p>\r\n\r\n        <br /> <br /> <br /> <br />\r\n        <h2>2. How to find bombs</h2>\r\n\r\n        {\r\n            showBoard(boards[tutorialGameIndex])\r\n        }\r\n        <p>{demoBoardMessages[tutorialGameIndex]}</p>\r\n        {/* {\r\n            return         <p>hi</p>\r\n\r\n            demoBoardMessages[tutorialGameIndex]\r\n        } */}\r\n\r\n        <div>\r\n            <FontAwesomeIcon\r\n                icon={faArrowCircleLeft}\r\n                size='2x'\r\n                onClick={() => { setTutorialGameIndex(tutorialGameIndex - 1) }}\r\n                style={{ display: `${!!!tutorialGameIndex ? \"none\" : \"\"}` }}\r\n            />\r\n            <FontAwesomeIcon\r\n                icon={faArrowCircleRight}\r\n                size='2x'\r\n                onClick={() => { setTutorialGameIndex(tutorialGameIndex + 1) }}\r\n                style={{ display: `${tutorialGameIndex === boards.length - 1 ? \"none\" : \"\"}` }}\r\n\r\n            />\r\n        </div>\r\n\r\n        <br /><br />\r\n        <p>TODO: Highlight certain tiles to showcase point, put same game for practice</p>\r\n\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inHowToPlay: isPageSelected(state, HOW_TO_PLAY),\r\n    tutorialGameIndex: getTutorialGameIndex(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setTutorialGameIndex: (index) => dispatch(setTutorialGameIndex(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HowToPlay);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { pageLoadedSetup } from './actions'\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport Logo from './Logo';\r\nimport MainMenu from './Pages/MainMenu/MainMenu';\r\nimport GameSetup from './Pages/GameSetup/GameSetup';\r\nimport GameDisplay from './Pages/InGame/GameDisplay';\r\nimport HowToPlay from './Pages/HowToPlay/HowToPlay';\r\n\r\nconst Pages = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst App = ({ pageLoadedSetup }) => {\r\n    return <div className=\"App-Wrapper unselectable\" onLoad={pageLoadedSetup}>\r\n        <div className=\"App\">\r\n            <Logo />\r\n            <Pages>\r\n                <MainMenu />\r\n                <GameSetup />\r\n                <GameDisplay />\r\n                <HowToPlay />\r\n            </Pages>\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pageLoadedSetup: () => dispatch(pageLoadedSetup()),\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport App from './App.js';\r\n\r\n\r\nconst store = configureStore();\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate\r\n            loading={<div>Loading...</div>}\r\n            persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));"],"sourceRoot":""}