{"version":3,"sources":["actions.js","Constants.js","reducers.js","store.js","Logo.js","selectors.js","Pages/MainMenu/MainMenu.js","Pages/GameSetup/GameSetup.js","utils.js","Pages/InGame/Timer.js","Pages/InGame/InGameMenu.js","Minesweeper/ImageUrls.js","Minesweeper/TileImageFactory.js","Minesweeper/Tile.js","Minesweeper/Minesweeper.js","Pages/InGame/Game.js","Pages/InGame/GameDisplay.js","App.js","index.js"],"names":["toggleGameMode","now","type","payload","startGame","difficulty","switchPages","PAGE","EASY","rows","cols","numBombs","key","MEDIUM","HARD","DIFFICULTIES","ALL_PAGES","initialState","gameProps","isPaused","game","board","timeElapsed","isSet","pages","reducers","data","state","action","forEach","page","gameMode","update","shouldRerender","newMode","didWin","win","loss","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","LogoContainer","styled","div","LogoText","p","Logo","getTimeElapsed","getBoard","plsRerender","getGame","getIsSet","getGameMode","getGameDifficulty","isPageSelected","previousGameExists","length","getWin","gameOver","getLoss","connect","continuePreviousGame","inMainMenu","inSetupMode","dispatch","setupNewGame","continueGame","MainMenuContainer","style","display","onClick","localRemoveCachedBoard","newDifficulty","switchToGame","GameSetupContainer","Object","keys","map","s","msg","charAt","toUpperCase","slice","toLowerCase","id","name","value","htmlFor","selectedValue","gameDifficultySelector","document","querySelectorAll","difficultyOption","checked","gameDifficulty","startNewGame","TimerWrapper","firstPause","inGame","inGameFirstClick","updateTimer","setTimeout","InGameMenuWrapper","remainingBombs","mainMenu","toggledPause","size","icon","faHome","faFlag","faMousePointer","faPlay","faPause","faRedo","HINT_TILES","BombImage","this","url","OpenedImage","FlaggedImage","UnopenedImage","timeImageFactory","createImage","tile","isOpened","isFlagged","TileImage","props","TileWrapper","Tile","click","position","zIndex","left","top","opacity","bombTile","safeTile","isBomb","genNonBombs","numTiles","includeIndex","toInsert","tiles","count","push","index","MinesweeperGame","initialClick","bombs","nonBombs","remaining","opened","Set","createBoard","clickTile","pos","indexToPos","totalTiles","genBombs","numSafe","isCorner","isOnAnEdge","randomSafe","randomizeBoard","arr","i","j","Math","floor","random","shuffle","concat","finishedBoard","Array","fill","iterateOverNeighbors","coords","y","x","iterateOverRowsCols","row","col","posToArrIndex","calculateBombNumberForEachTile","callback","xDelta","yDelta","numEdgesOfPos","right","bottom","total","trunc","openNonBombNeighbors","curr","flaggedState","numFlagged","tileToOpen","neighborsWithFlags","indexWithinBounds","has","add","decrementUsed","lose","emptyBoard","first","rerender","performInitialSetup","newGame","firstClick","updateBoard","removeCachedBoard","setDifficulty","GameWrapper","window","addEventListener","event","visibleBoard","isClicked","openNeighbors","unopenedTileClick","flagTile","flagClick","initialTileClick","Win","Loss","title","src","width","height","frameBorder","class","allowFullScreen","textAlign","App","pageLoadedSetup","className","React","Component","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.9b28b41e.chunk.js","sourcesContent":["export const PAGE_LOADED_SETUP = 'PAGE_LOADED_SETUP';\r\nexport const pageLoadedSetup = () => ({\r\n    type: PAGE_LOADED_SETUP,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const initializeBoard = (game) => ({\r\n    type: INITIALIZE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const updateBoard = () => ({\r\n    type: UPDATE_BOARD,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const REMOVE_CACHED_BOARD = 'REMOVE_CACHED_BOARD';\r\nexport const removeCachedBoard = () => ({\r\n    type: REMOVE_CACHED_BOARD,\r\n    payload: {},\r\n});\r\n\r\nexport const TOGGLE_PAUSE_GAME = 'TOGGLE_PAUSE_GAME';\r\nexport const togglePauseGame = () => ({\r\n    type: TOGGLE_PAUSE_GAME,\r\n    payload: {},\r\n});\r\n\r\nexport const END_GAME = 'END_GAME';\r\nexport const endGame = (didWin) => ({\r\n    type: END_GAME,\r\n    payload: {didWin},\r\n});\r\n\r\n\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const updateTimer = (timeElapsed) => ({\r\n    type: UPDATE_TIMER,\r\n    payload: { timeElapsed },\r\n});\r\n\r\nexport const TOGGLE_GAME_MODE = 'TOGGLE_GAME_MODE';\r\nexport const toggleGameMode = (now) => ({\r\n    type: TOGGLE_GAME_MODE,\r\n    payload: { now },\r\n});\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const startGame = (difficulty) => ({\r\n    type: START_GAME,\r\n    payload: { difficulty },\r\n});\r\n\r\nexport const SWITCH_PAGES = 'SWITCH_PAGES';\r\nexport const switchPages = (PAGE) => ({\r\n    type: SWITCH_PAGES,\r\n    payload: { PAGE },\r\n});\r\n\r\n","\r\nexport const EASY = {\r\n    rows: 9,\r\n    cols: 9,\r\n    numBombs: 10,\r\n    key: \"EASY\"\r\n};\r\n\r\nexport const MEDIUM = {\r\n    rows: 16,\r\n    cols: 16,\r\n    numBombs: 40,\r\n    key: \"MEDIUM\"\r\n};\r\n\r\nexport const HARD = {\r\n    rows: 30,\r\n    cols: 16,\r\n    numBombs: 99,\r\n    key: \"HARD\"\r\n};\r\n\r\nexport const DIFFICULTIES = {\r\n    \"EASY\": EASY,\r\n    \"MEDIUM\": MEDIUM,\r\n    \"HARD\": HARD,\r\n}\r\n\r\n// Page States\r\nexport const MAIN_MENU = \"MAIN_MENU\";\r\nexport const SETUP_NEW_GAME = \"SETUP_NEW_GAME\";\r\nexport const IN_GAME_FIRST_CLICK = \"IN_GAME_FIRST_CLICK\";\r\nexport const IN_GAME = \"IN_GAME\";\r\n\r\nexport const ALL_PAGES = [MAIN_MENU, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK, IN_GAME];","import {\r\n    INITIALIZE_BOARD,\r\n    REMOVE_CACHED_BOARD,\r\n    UPDATE_BOARD,\r\n    UPDATE_TIMER,\r\n    TOGGLE_GAME_MODE,\r\n    START_GAME,\r\n    PAGE_LOADED_SETUP,\r\n    SWITCH_PAGES,\r\n    TOGGLE_PAUSE_GAME,\r\n    END_GAME\r\n} from './actions';\r\nimport { EASY, MAIN_MENU, ALL_PAGES } from './Constants';\r\n\r\n\r\n\r\nconst initialState = {\r\n    gameProps: {\r\n        difficulty: EASY,\r\n        isPaused: false,\r\n        game: {\r\n            board: []\r\n        },\r\n        timeElapsed: 0,\r\n        isSet: false,\r\n    },\r\n    pages: {}\r\n};\r\n\r\nexport const data = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case PAGE_LOADED_SETUP: {\r\n            ALL_PAGES.forEach(page => {\r\n                state.pages[page] = false;\r\n            })\r\n            state.pages[MAIN_MENU] = true;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            }\r\n        }\r\n\r\n        case INITIALIZE_BOARD: {\r\n            const { game } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                    isSet: true,\r\n                    update: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        case UPDATE_BOARD: {\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    shouldRerender: state.gameProps.shouldRerender + 1,\r\n                }\r\n            };\r\n        }\r\n\r\n        case UPDATE_TIMER: {\r\n            const { timeElapsed } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    timeElapsed: timeElapsed,\r\n                }\r\n            };\r\n        }\r\n\r\n        case TOGGLE_PAUSE_GAME: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    isPaused: !state.gameProps.isPaused,\r\n                }\r\n            }\r\n        }\r\n\r\n        case REMOVE_CACHED_BOARD: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    isSet: false,\r\n                    game: {\r\n                        board: [],\r\n                    },\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                },\r\n            };\r\n        }\r\n\r\n        case TOGGLE_GAME_MODE: {\r\n            const newMode = state.gameProps.gameMode === 'clicking' ? 'flagging' : 'clicking';\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: newMode,\r\n                }\r\n            };\r\n        }\r\n\r\n        case START_GAME: {\r\n            const { difficulty } = payload;\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    difficulty: difficulty,\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                }\r\n            };\r\n        }\r\n\r\n        case SWITCH_PAGES: {\r\n            const { PAGE } = payload;\r\n\r\n            ALL_PAGES.forEach((page) => {\r\n                state[\"pages\"][page] = page === PAGE;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case END_GAME: {\r\n            const { didWin } = payload;\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    win: didWin,\r\n                    loss: !didWin,\r\n                }\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { data } from './reducers';\r\n\r\nconst reducers = {\r\n    data,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () =>\r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst LogoContainer = styled.div`\r\n\r\n`;\r\n\r\nconst LogoText = styled.p`\r\n`;\r\n\r\nconst Logo = () =>(\r\n    <LogoContainer>\r\n        <LogoText>Lorne's Minesweeper</LogoText>\r\n    </LogoContainer>\r\n);\r\n\r\nexport default Logo;","export const getTimeElapsed = (state) => {\r\n    return state.data.gameProps.timeElapsed;\r\n}\r\n\r\nexport const isPaused = (state) => {\r\n    return state.data.gameProps.isPaused;\r\n}\r\n\r\nexport const getBoard = (state) => {\r\n    return state.data.gameProps.game.board;\r\n};\r\n\r\nexport const plsRerender = (state) => {\r\n    return state.data.gameProps.shouldRerender;\r\n};\r\n\r\nexport const getGame = (state) => {\r\n    return state.data.gameProps.game;\r\n};\r\n\r\nexport const getIsSet = (state) => {\r\n    return state.data.gameProps.isSet;\r\n};\r\n\r\nexport const getStartTime = (state) => {\r\n    return state.data.gameProps.startTime;\r\n};\r\n\r\nexport const getCurrentTime = (state) => {\r\n    return state.data.gameProps.now;\r\n};\r\n\r\nexport const getGameMode = (state) => {\r\n    return state.data.gameProps.gameMode;\r\n};\r\n\r\nexport const getGameDifficulty = (state) => {\r\n    return state.data.gameProps.difficulty;\r\n};\r\n\r\nexport const isPageSelected = (state, page) => {\r\n    return state.data.pages[page];\r\n}\r\n\r\nexport const previousGameExists = (state) => {\r\n    return state.data.gameProps.game.board.length > 0;\r\n}\r\n\r\nexport const getRemainingBombs = (state) => {\r\n    return 0;\r\n}\r\nexport const getWin = (state) => {\r\n    return state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const getLoss = (state) => {\r\n    return !state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const gameOver = (state) => {\r\n    return state.data.gameProps.game.gameOver;\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    isPageSelected,\r\n    previousGameExists,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { switchPages } from '../../actions';\r\nimport { MAIN_MENU, IN_GAME, SETUP_NEW_GAME } from '../../Constants';\r\n\r\nconst MainMenu = ({ continuePreviousGame, inSetupMode, setupNewGame, inMainMenu, continueGame }) => {\r\n    const MainMenuContainer = styled.div`\r\n        display:${!!inSetupMode ? \"none\" : \"inline-grid\"};\r\n    `;\r\n\r\n    return <div style={{ display: inMainMenu ? \"\" : \"none\" }}>\r\n\r\n        <MainMenuContainer>\r\n\r\n            <button style={{ display: `${continuePreviousGame ? \"\" : \"none\"}` }} onClick={() => {\r\n                continueGame();\r\n            }}>Continue Game </button>\r\n\r\n            <button onClick={() => {\r\n                setupNewGame();\r\n\r\n            }}>New Game</button>\r\n\r\n            <button>Settings </button>\r\n            <button>How To Play </button>\r\n        </MainMenuContainer>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    continuePreviousGame: previousGameExists(state) && !gameOver(state),\r\n    inMainMenu: isPageSelected(state, MAIN_MENU),\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setupNewGame: () => dispatch(switchPages(SETUP_NEW_GAME)),\r\n    continueGame: () => dispatch(switchPages(IN_GAME)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { EASY, MEDIUM, HARD, DIFFICULTIES, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport { removeCachedBoard, startGame, switchPages } from '../../actions';\r\nimport {\r\n    isPageSelected,\r\n} from '../../selectors';\r\n\r\nimport { capitalize } from '../../utils'\r\n\r\nconst GameSetup = ({ localRemoveCachedBoard, startGame, inSetupMode, switchToGame }) => {\r\n\r\n    const GameSetupContainer = styled.div`\r\n        display: ${inSetupMode ? \"inline-grid\" : \"none\"};\r\n    `;\r\n\r\n    const startNewGame = () => {\r\n        localRemoveCachedBoard();\r\n\r\n        const gameDifficultySelector = document.querySelectorAll('input[name=\\'gameDifficulty\\']');\r\n        let selectedValue;\r\n        for (const difficultyOption of gameDifficultySelector) {\r\n            if (difficultyOption.checked) {\r\n                selectedValue = difficultyOption.value;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let gameDifficulty = EASY;\r\n        if (selectedValue === MEDIUM.key) {\r\n            gameDifficulty = MEDIUM;\r\n        } else if (selectedValue === HARD.key) {\r\n            gameDifficulty = HARD;\r\n        }\r\n\r\n        startGame(gameDifficulty);\r\n    }\r\n\r\n    return <GameSetupContainer>\r\n        {\r\n            Object.keys(DIFFICULTIES).map((key) => {\r\n                const difficulty = DIFFICULTIES[key];\r\n                const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`\r\n                return <div>\r\n                    <input type='radio' id={key} name='gameDifficulty' value={key} />\r\n                    <label htmlFor={key}>{msg}</label>\r\n                </div>\r\n            })\r\n        }\r\n        <button onClick={() => {\r\n            startNewGame();\r\n            switchToGame();\r\n        }}>Start Game </button>\r\n    </GameSetupContainer>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    startGame: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n    switchToGame: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameSetup);","export function shuffle(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function capitalize(s) {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    isPaused,\r\n    getTimeElapsed,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\n\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nimport { updateTimer } from \"../../actions\";\r\n\r\nconst TimerWrapper = styled.div``;\r\n\r\nlet firstPause = false;\r\n\r\nconst Timer = ({ timeElapsed, isPaused, updateTimer, inGame, inGameFirstClick, gameOver }) => {\r\n\r\nif (gameOver) return <div>{timeElapsed}</div>;\r\n\r\n    let incrementTimer = () => {\r\n        setTimeout(() => {\r\n            if (inGame && !isPaused && !firstPause)\r\n                updateTimer(timeElapsed + 1);\r\n        }, 1000)\r\n    };\r\n\r\n    if (inGame && !isPaused)\r\n        incrementTimer();\r\n    else if (inGameFirstClick)\r\n        updateTimer(0);\r\n\r\n    if (!isPaused) firstPause = false;\r\n    else if (!firstPause && isPaused) {\r\n        firstPause = true;\r\n    }\r\n\r\n    return <TimerWrapper>{timeElapsed}</TimerWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeElapsed: getTimeElapsed(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    inGameFirstClick: isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateTimer: (timeElapsed) => dispatch(updateTimer(timeElapsed)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { faMousePointer, faFlag, faRedo, faHome, faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    getGame,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    getRemainingBombs,\r\n    isPaused,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport {\r\n    startGame,\r\n    removeCachedBoard,\r\n    toggleGameMode,\r\n    switchPages,\r\n    togglePauseGame,\r\n\r\n} from '../../actions'\r\nimport Timer from './Timer';\r\nimport { MAIN_MENU, IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nconst InGameMenuWrapper = styled.div`\r\n    display:flex;\r\n    margin:15px;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst InGameMenu = ({\r\n    gameMode, isPaused, gameDifficulty, toggleGameMode, inGameFirstClick, localRemoveCachedBoard, startGame, mainMenu, remainingBombs, toggledPause, inGame, gameOver\r\n}) => {\r\n\r\n    return <InGameMenuWrapper>\r\n        <FontAwesomeIcon size='2x' icon={faHome} onClick={() => { mainMenu() }} />\r\n        <Timer />\r\n        <div>{remainingBombs}</div>\r\n\r\n        <FontAwesomeIcon\r\n            size='2x'\r\n            style={{ display: `${!gameOver ? \"\" : \"none\"}` }}\r\n            icon={gameMode === 'flagging' ? faFlag : faMousePointer}\r\n            onClick={\r\n                () => {\r\n                    toggleGameMode();\r\n                }\r\n            }\r\n        />\r\n\r\n        <FontAwesomeIcon style={{ display: `${inGame && !gameOver ? \"\" : \"none\"}` }} size='2x' icon={isPaused ? faPlay : faPause} onClick={toggledPause} />\r\n\r\n        <FontAwesomeIcon size='2x' icon={faRedo} onClick={() => {\r\n            localRemoveCachedBoard();\r\n            inGameFirstClick();\r\n            startGame(gameDifficulty);\r\n        }} />\r\n\r\n    </InGameMenuWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    game: getGame(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    remainingBombs: getRemainingBombs(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    mainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n    startGame: (gameDifficulty) => dispatch(startGame(gameDifficulty)),\r\n    inGameFirstClick: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggledPause: () => dispatch(togglePauseGame()),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InGameMenu);","/* eslint-disable max-len */\r\nexport const BOMB_TILE = 'https://apprecs.org/ios/images/app-icons/256/e7/451931111.jpg';\r\nexport const HINT_TILES = [\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Minesweeper_0.svg/2000px-Minesweeper_0.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Minesweeper_1.svg/2000px-Minesweeper_1.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Minesweeper_2.svg/2000px-Minesweeper_2.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Minesweeper_3.svg/2000px-Minesweeper_3.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Minesweeper_4.svg/2000px-Minesweeper_4.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Minesweeper_5.svg/2000px-Minesweeper_5.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Minesweeper_6.svg/2000px-Minesweeper_6.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Minesweeper_7.svg/2000px-Minesweeper_7.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Minesweeper_8.svg/2000px-Minesweeper_8.svg.png',\r\n];\r\n\r\nexport const FLAG_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Minesweeper_flag.svg/2000px-Minesweeper_flag.svg.png';\r\nexport const UNOPENED_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Minesweeper_unopened_square.svg/1024px-Minesweeper_unopened_square.svg.png';","/* eslint-disable complexity */\r\n/* eslint-disable func-style */\r\n\r\nimport styled from 'styled-components';\r\nimport { BOMB_TILE, HINT_TILES, FLAG_TILE, UNOPENED_TILE } from './ImageUrls';\r\n\r\nconst BombImage = function () {\r\n    this.url = BOMB_TILE;\r\n};\r\n\r\nconst OpenedImage = function (numBombs) {\r\n    this.url = HINT_TILES[numBombs];\r\n};\r\n\r\nconst FlaggedImage = function () {\r\n    this.url = FLAG_TILE;\r\n};\r\n\r\nconst UnopenedImage = function () {\r\n    this.url = UNOPENED_TILE;\r\n};\r\n\r\nfunction TileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (tile.isOpened && tile.type === 'bomb') {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nconst timeImageFactory = new TileImageFactory();\r\n\r\nconst TileImage = styled.div`\r\ncontent: url(${(props) => {\r\n        return timeImageFactory.createImage(props.tile);\r\n    }});\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nexport default TileImage;","/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport TileImage from './TileImageFactory';\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst Tile = ({ tile, gameMode, click }) => {\r\n    return <TileWrapper\r\n        onClick={() => {\r\n            click(tile);\r\n        }}>\r\n\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${gameMode === 'flagging' && !tile.isOpened && !tile.isFlagged ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\nexport default Tile;","/* eslint-disable complexity */\r\nimport { shuffle } from '../utils';\r\n\r\nconst bombTile = {\r\n    type: 'bomb',\r\n};\r\n\r\nconst safeTile = {\r\n    type: 'safe',\r\n};\r\n\r\nfunction isBomb(tile) {\r\n    return tile.type === 'bomb';\r\n}\r\n\r\nclass MinesweeperGame {\r\n    constructor(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = numBombs;\r\n        this.nonBombs = (rows * cols) - numBombs;\r\n        this.remaining = (rows * cols) - numBombs;\r\n        this.opened = new Set();\r\n        this.gameOver = false;\r\n        this.didWin = false;\r\n        if (this.bombs === 0) {\r\n            this.board = genNonBombs(rows * cols);\r\n        } else {\r\n            this.board = this.createBoard(gameDifficulty, initialClick);\r\n            this.clickTile(this.board[initialClick]);\r\n        }\r\n    }\r\n\r\n    createBoard(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n\r\n        const pos = this.indexToPos(initialClick, cols);\r\n        const totalTiles = rows * cols;\r\n        const bombs = genBombs(numBombs);\r\n\r\n        let numSafe = 9;\r\n\r\n        if (this.isCorner(pos, rows, cols)) {\r\n            numSafe = 4;\r\n        } else if (this.isOnAnEdge(pos, rows, cols)) {\r\n            numSafe = 6;\r\n        }\r\n\r\n        const randomSafe = genNonBombs(totalTiles - numSafe - numBombs, safeTile);\r\n        const randomizeBoard = shuffle(bombs.concat(randomSafe));\r\n\r\n        const finishedBoard = [...Array(rows)].map(() => Array(cols).fill(0));\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            finishedBoard[coords.y][coords.x] = safeTile;\r\n        });\r\n\r\n        let index = 0;\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!finishedBoard[row][col]) {\r\n                finishedBoard[row][col] = randomizeBoard[index];\r\n                index++;\r\n            }\r\n\r\n            finishedBoard[row][col] = {\r\n                ...finishedBoard[row][col],\r\n                index: this.posToArrIndex({ x: col, y: row }, cols),\r\n                numBombs: 0,\r\n            };\r\n        });\r\n\r\n\r\n        this.calculateBombNumberForEachTile(finishedBoard, rows, cols);\r\n\r\n        return [].concat(...finishedBoard);\r\n    }\r\n\r\n    iterateOverNeighbors(pos, callback) {\r\n        for (let xDelta = -1; xDelta <= 1; xDelta++) {\r\n            for (let yDelta = -1; yDelta <= 1; yDelta++) {\r\n                const coords = { x: pos.x + xDelta, y: pos.y + yDelta };\r\n                if (coords.x < 0 || coords.x >= this.cols) {\r\n                    continue;\r\n                }\r\n                if (coords.y < 0 || coords.y >= this.rows) {\r\n                    continue;\r\n                }\r\n                callback(coords);\r\n            }\r\n        }\r\n    }\r\n\r\n    iterateOverRowsCols(callback) {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.cols; col++) {\r\n                callback(row, col);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateBombNumberForEachTile(finishedBoard, rows, cols) {\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!isBomb(finishedBoard[row][col])) {\r\n                return;\r\n            }\r\n            const pos = { x: col, y: row };\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                finishedBoard[coords.y][coords.x].numBombs += 1;\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    posToArrIndex(pos, cols) {\r\n        return pos.y * cols + pos.x;\r\n    }\r\n\r\n    isCorner(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) === 2;\r\n    }\r\n\r\n    numEdgesOfPos(pos, rows, cols) {\r\n        const left = pos.y === 0;\r\n        const right = pos.y === cols - 1;\r\n        const top = pos.x === 0;\r\n        const bottom = pos.x === rows - 1;\r\n\r\n        let total = 0;\r\n        if (left || right) total++;\r\n        if (top || bottom) total++;\r\n\r\n        return total;\r\n    }\r\n\r\n    isOnAnEdge(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) > 0;\r\n    }\r\n\r\n\r\n\r\n    indexToPos(index, cols) {\r\n        const y = Math.trunc(index / cols);\r\n        const x = index - y * cols;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    clickTile(tile) {\r\n        this.openNonBombNeighbors(tile);\r\n    }\r\n\r\n    flagTile(tile) {\r\n        const curr = this.board[tile.index];\r\n        const flaggedState = curr.isFlagged;\r\n        curr.isFlagged = !flaggedState;\r\n    }\r\n\r\n    indexWithinBounds(index) {\r\n        return index >= 0 && index < this.rows * this.cols;\r\n    }\r\n\r\n    isFlagged(index) {\r\n        return this.board[index].isFlagged;\r\n    }\r\n\r\n    neighborsWithFlags(tile) {\r\n        let numFlagged = 0;\r\n        this.iterateOverNeighbors(this.indexToPos(tile.index, this.cols), (coords) => {\r\n            const index = this.posToArrIndex(coords, this.cols);\r\n            if (this.isFlagged(index)) {\r\n                numFlagged++;\r\n            }\r\n        });\r\n\r\n        return numFlagged;\r\n    }\r\n\r\n    openNeighbors(tileToOpen) {\r\n        const numFlagged = this.neighborsWithFlags(tileToOpen);\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n\r\n        if (numFlagged === tileToOpen.numBombs) {\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                const index = this.posToArrIndex(coords, this.cols);\r\n\r\n                if (this.indexWithinBounds(index)) {\r\n                    const tile = this.board[index];\r\n                    if (this.isFlagged(index)) {\r\n                        return;\r\n                    }\r\n                    if (tile.isOpened) {\r\n                        return;\r\n                    }\r\n                    this.clickTile(tile);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    decrementUsed(index) {\r\n        if (!this.opened.has(index)) {\r\n            this.remaining--;\r\n        }\r\n        this.opened.add(index);\r\n        if (this.opened.size === this.nonBombs) {\r\n            this.win();\r\n            return;\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        return this.gameOver;\r\n    }\r\n\r\n    win() {\r\n        this.gameOver = true;\r\n        this.didWin = true;\r\n    }\r\n\r\n    lose() {\r\n        this.gameOver = true;\r\n    }\r\n\r\n    openNonBombNeighbors(tileToOpen) {\r\n        if (tileToOpen.type === 'bomb') {\r\n            this.lose();\r\n            return;\r\n        }\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n        if (tileToOpen.isOpened) {\r\n            return;\r\n        }\r\n        this.board[tileToOpen.index].isOpened = true;\r\n\r\n        this.decrementUsed(tileToOpen.index);\r\n\r\n        if (tileToOpen.numBombs && tileToOpen.numBombs > 0) {\r\n            return;\r\n        }\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            const tileToOpen = this.board[this.posToArrIndex(coords, this.cols)];\r\n            if (isBomb(tileToOpen)) {\r\n                return;\r\n            }\r\n\r\n            this.openNonBombNeighbors(tileToOpen);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction genNonBombs(numTiles, includeIndex, toInsert) {\r\n    const tiles = [];\r\n\r\n\r\n    for (let count = 0; count < numTiles; count++) {\r\n        tiles.push({\r\n            ...toInsert,\r\n            index: count,\r\n        });\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\nfunction genBombs(numBombs) {\r\n    const bombs = [];\r\n\r\n    for (let count = 0; count < numBombs; count++) {\r\n        bombs.push(bombTile);\r\n    }\r\n\r\n    return bombs;\r\n}\r\n\r\nexport default MinesweeperGame;","/* eslint-disable react/prop-types */\r\n\r\nimport React from 'react';\r\nimport Tile from '../../Minesweeper/Tile';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    getBoard,\r\n    getIsSet,\r\n    getGame,\r\n    plsRerender,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    isPaused,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { initializeBoard, updateBoard, removeCachedBoard, toggleGameMode, startGame, switchPages, } from '../../actions';\r\n\r\nimport MinesweeperGame from '../..//Minesweeper/Minesweeper';\r\nimport { IN_GAME } from '../../Constants';\r\n\r\nlet emptyBoard = null;\r\n\r\nlet first = true;\r\n\r\nconst Game = ({\r\n    // state\r\n    board, game, isSet, gameMode, gameDifficulty, isPaused, gameOver,\r\n    // actions\r\n    performInitialSetup, updateBoard, firstClick, toggleGameMode,\r\n}) => {\r\n\r\n    const GameWrapper = styled.div`\r\n        display: inline-grid;\r\n        visibility: ${isPaused ? \"hidden\" : \"\"};\r\n        grid-template-columns: repeat(${gameDifficulty ? gameDifficulty.cols : 0},1fr);\r\n    `;\r\n\r\n    emptyBoard = new MinesweeperGame({\r\n        ...gameDifficulty,\r\n        numBombs: 0,\r\n    }, null);\r\n\r\n    if (first && isSet) {\r\n        window.addEventListener('keydown', (event) => {\r\n            if (event.key === 'F' || event.key === 'f') {\r\n                if(gameOver) return;\r\n                toggleGameMode();\r\n            }\r\n        }, false);\r\n        first = false;\r\n    }\r\n    const visibleBoard = isSet ? board : emptyBoard.board;\r\n\r\n    const initialTileClick = (tile) => {\r\n        const newGame = new MinesweeperGame(gameDifficulty, tile.index);\r\n        performInitialSetup(newGame);\r\n        firstClick();\r\n    };\r\n\r\n    const bombClick = () => {\r\n        game.lose();\r\n    };\r\n\r\n    const unopenedTileClick = (tile) => {\r\n        game.clickTile(tile);\r\n        updateBoard();\r\n    }\r\n\r\n    const flagClick = (tile) => {\r\n        game.flagTile(tile);\r\n        updateBoard();\r\n    };\r\n\r\n    const openNeighbors = (tile) => {\r\n        game.openNeighbors(tile);\r\n        updateBoard();\r\n    };\r\n\r\n    function isClicked(tile) {\r\n        if (tile && tile.isOpened) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return <GameWrapper>\r\n        {\r\n            visibleBoard.map((tile) => {\r\n                return <Tile\r\n                    key={tile.index}\r\n                    tile={tile}\r\n                    gameMode={gameMode}\r\n                    click={\r\n                        (tile) => {\r\n                            if (gameOver) return;\r\n\r\n                            if (!isSet) {\r\n                                initialTileClick(tile);\r\n                                return;\r\n                            }\r\n\r\n                            if (isClicked(tile)) {\r\n                                openNeighbors(tile);\r\n                                return;\r\n                            }\r\n\r\n                            if (gameMode === 'flagging') {\r\n                                flagClick(tile);\r\n                                return;\r\n                            }\r\n\r\n                            if (tile.isFlagged) {\r\n                                return;\r\n                            }\r\n                            if (tile.type === 'bomb') {\r\n                                bombClick(tile);\r\n                                return;\r\n                            }\r\n\r\n                            unopenedTileClick(tile);\r\n                        }\r\n                    }\r\n                />;\r\n            })\r\n        }\r\n    </GameWrapper>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    isPaused: isPaused(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    performInitialSetup: (newGame) => dispatch(initializeBoard(newGame)),\r\n    firstClick: () => dispatch(switchPages(IN_GAME)),\r\n    updateBoard: () => dispatch(updateBoard()),\r\n    removeCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport InGameMenu from './InGameMenu';\r\nimport Game from './Game';\r\nimport { isPageSelected, getWin, getLoss, gameOver } from '../../selectors';\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport styled from 'styled-components';\r\n\r\nconst GameDisplay = ({\r\n    inGame, win, loss\r\n}) => {\r\n\r\n    const Win = styled.div`\r\n        display:${win ? \"\" : \"none\"};\r\n    `;\r\n\r\n    const Loss = styled.div`\r\n        display:${loss ? \"\" : \"none\"};\r\n    `;\r\n\r\n    return <div style={{ display: inGame ? \"\" : \"none\" }} >\r\n        <InGameMenu />\r\n        <Win>\r\n            <iframe title=\"winGIF\" src=\"https://giphy.com/embed/peAFQfg7Ol6IE\" width=\"480\" height=\"455\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You found all the bombs!! (You win)</p>\r\n        </Win>\r\n        <Loss>\r\n            <iframe title=\"lossGIF\" src=\"https://giphy.com/embed/oe33xf3B50fsc\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You clicked a bomb!</p>\r\n        </Loss>\r\n        <Game />\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inGame: isPageSelected(state, IN_GAME) || isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    win: getWin(state),\r\n    loss: getLoss(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameDisplay);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { pageLoadedSetup } from './actions'\r\nimport './App.css';\r\n\r\nimport Logo from './Logo';\r\nimport MainMenu from './Pages/MainMenu/MainMenu';\r\nimport GameSetup from './Pages/GameSetup/GameSetup';\r\nimport GameDisplay from './Pages/InGame/GameDisplay';\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.pageLoadedSetup();\r\n    }\r\n    render() {\r\n\r\n        return <div className=\"App-Wrapper\">\r\n            <div className=\"App\">\r\n                <Logo />\r\n                {/* Pages */}\r\n                <MainMenu />\r\n                <GameSetup />\r\n                <GameDisplay />\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pageLoadedSetup: () => dispatch(pageLoadedSetup()),\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport App from './App.js';\r\n\r\n\r\nconst store = configureStore();\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate\r\n            loading={<div>Loading...</div>}\r\n            persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));"],"sourceRoot":""}