{"version":3,"sources":["actions.js","Constants.js","utils.js","Minesweeper/Tile.js","Minesweeper/Minesweeper.js","reducers.js","store.js","Logo.js","selectors.js","Pages/MainMenu/MainMenu.js","Pages/GameSetup/GameSetup.js","Pages/InGame/Timer.js","Pages/InGame/InGameMenu.js","Minesweeper/ImageUrls.js","Minesweeper/TileImageFactory.js","Minesweeper/TileIcon.js","Pages/InGame/Game.js","Pages/InGame/GameDisplay.js","Minesweeper/DemoTile.js","Pages/HowToPlay/HowToPlay.js","App.js","index.js"],"names":["toggleGameMode","now","type","payload","startGame","difficulty","switchPages","PAGE","EASY","rows","cols","numBombs","key","MEDIUM","HARD","DIFFICULTIES","ALL_PAGES","random","seed","Math","x","sin","floor","capitalize","s","charAt","toUpperCase","slice","toLowerCase","Tile","oldTile","isBomb","index","this","setProps","status","isOpened","isFlagged","coords","game","gameMode","openNeighbors","flagging","flagTile","lose","clickTile","keys","Object","keyIndex","length","incStatus","iterateOverRowsCols","gameDifficulty","callback","row","col","genNonBombs","numTiles","tiles","count","push","iterateOverNeighbors","pos","xDelta","yDelta","posToArrIndex","numEdgesOfPos","left","right","top","bottom","total","MinesweeperGame","oldGameProps","newGameProps","opened","Set","board","forEach","tile","add","map","tileDict","initialClickIndex","RANDOM_SEED","bombs","nonBombs","remaining","gameOver","didWin","createBoard","initialClick","trunc","indexToPos","totalTiles","genBombs","numSafe","isCorner","isOnAnEdge","randomSafe","randomizeBoard","arr","i","j","shuffle","concat","finishedBoard","Array","fill","index2","setStatus","setIndex","setCoords","calculateBombNumberForEachTile","updateTileStatus","openNonBombNeighbors","numFlagged","tileToOpen","neighborsWithFlags","indexWithinBounds","has","size","win","decrementUsed","initialState","gameProps","isPaused","timeElapsed","isSet","tutorialPage","gameIndex","pages","reducers","data","state","action","page","clicking","update","shouldRerender","newMode","console","log","loss","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","LogoContainer","styled","div","LogoText","p","connect","dispatch","openMainMenu","onClick","style","fontFamily","fontSize","margin","cursor","getTimeElapsed","getBoard","plsRerender","getGame","getIsSet","getGameMode","getGameDifficulty","isPageSelected","previousGameExists","getRemainingBombs","filter","totalBombs","max","getWin","getLoss","changed","ownProps","getTile","getTutorialGameIndex","MainMenuContainer","props","inSetupMode","StyledMainMenuButton","continuePreviousGame","inMainMenu","setupNewGame","continueGame","switchToInGame","showHowToPlay","display","marginTop","className","GameSetupContainer","localRemoveCachedBoard","newDifficulty","switchToGame","msg","id","name","value","selectedValue","gameDifficultySelector","document","querySelectorAll","difficultyOption","checked","startNewGame","TimerWrapper","firstPause","inGame","inGameFirstClick","updateTimer","setTimeout","InGameMenuWrapper","remainingBombs","mainMenu","toggledPause","icon","faHome","faFlag","faMousePointer","faPlay","faPause","faRedo","HINT_TILES","BombImage","url","OpenedImage","FlaggedImage","UnopenedImage","timeImageFactory","createImage","gameOverImageFactory","TileImage","TileWrapper","click","position","zIndex","opacity","faTimes","first","GameWrapper","rerender","performInitialSetup","newGame","firstClick","updateBoard","removeCachedBoard","setDifficulty","window","addEventListener","event","TileIcon","initialTileClick","Win","Loss","title","src","width","height","frameBorder","allowFullScreen","textAlign","DemoTile","showFlag","hasColor","outline","color","DemoBoard","emptyBoard","moves","boards","tilesToHighlight","boardInfo","moveCount","moveIndex","tileToHighlight","demoBoardMessages","inHowToPlay","tutorialGameIndex","setTutorialGameIndex","TypesOfTiles","hintTileIndex","justifyContent","child","faArrowCircleLeft","faArrowCircleRight","Pages","pageLoadedSetup","onLoad","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.68f3732c.chunk.js","sourcesContent":["export const PAGE_LOADED_SETUP = 'PAGE_LOADED_SETUP';\r\nexport const pageLoadedSetup = () => ({\r\n    type: PAGE_LOADED_SETUP,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const initializeBoard = (game) => ({\r\n    type: INITIALIZE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const updateBoard = () => ({\r\n    type: UPDATE_BOARD,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const REMOVE_CACHED_BOARD = 'REMOVE_CACHED_BOARD';\r\nexport const removeCachedBoard = () => ({\r\n    type: REMOVE_CACHED_BOARD,\r\n    payload: {},\r\n});\r\n\r\nexport const TOGGLE_PAUSE_GAME = 'TOGGLE_PAUSE_GAME';\r\nexport const togglePauseGame = () => ({\r\n    type: TOGGLE_PAUSE_GAME,\r\n    payload: {},\r\n});\r\n\r\nexport const END_GAME = 'END_GAME';\r\nexport const endGame = (didWin) => ({\r\n    type: END_GAME,\r\n    payload: {didWin},\r\n});\r\n\r\n\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const updateTimer = (timeElapsed) => ({\r\n    type: UPDATE_TIMER,\r\n    payload: { timeElapsed },\r\n});\r\n\r\nexport const TOGGLE_GAME_MODE = 'TOGGLE_GAME_MODE';\r\nexport const toggleGameMode = (now) => ({\r\n    type: TOGGLE_GAME_MODE,\r\n    payload: { now },\r\n});\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const startGame = (difficulty) => ({\r\n    type: START_GAME,\r\n    payload: { difficulty },\r\n});\r\n\r\nexport const CONTINUE_GAME = 'CONTINUE_GAME';\r\nexport const continueGame = () => ({\r\n    type: CONTINUE_GAME,\r\n    payload: {  },\r\n});\r\n\r\nexport const SWITCH_PAGES = 'SWITCH_PAGES';\r\nexport const switchPages = (PAGE) => ({\r\n    type: SWITCH_PAGES,\r\n    payload: { PAGE },\r\n});\r\n\r\nexport const SET_TUTORIAL_GAME_INDEX = 'SET_TUTORIAL_GAME_INDEX';\r\nexport const setTutorialGameIndex = (index) => ({\r\n    type: SET_TUTORIAL_GAME_INDEX,\r\n    payload: { index },\r\n});\r\n\r\n\r\n","\r\nexport const EASY = {\r\n    rows: 9,\r\n    cols: 9,\r\n    numBombs: 10,\r\n    key: \"EASY\"\r\n};\r\n\r\nexport const MEDIUM = {\r\n    rows: 16,\r\n    cols: 16,\r\n    numBombs: 40,\r\n    key: \"MEDIUM\"\r\n};\r\n\r\nexport const HARD = {\r\n    rows: 30,\r\n    cols: 16,\r\n    numBombs: 99,\r\n    key: \"HARD\"\r\n};\r\n\r\nexport const DIFFICULTIES = {\r\n    \"EASY\": EASY,\r\n    \"MEDIUM\": MEDIUM,\r\n    \"HARD\": HARD,\r\n}\r\n\r\n// Page States\r\nexport const MAIN_MENU = \"MAIN_MENU\";\r\nexport const SETUP_NEW_GAME = \"SETUP_NEW_GAME\";\r\nexport const IN_GAME_FIRST_CLICK = \"IN_GAME_FIRST_CLICK\";\r\nexport const IN_GAME = \"IN_GAME\";\r\nexport const HOW_TO_PLAY = \"HOW_TO_PLAY\"\r\n\r\nexport const ALL_PAGES = [MAIN_MENU, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK, IN_GAME, HOW_TO_PLAY];","function random(seed) {\r\n    if(!seed) seed = Math.random();\r\n    var x = Math.sin(seed++) * 10000;\r\n    return x - Math.floor(x);\r\n}\r\n\r\nexport function shuffle(arr, RANDOM_SEED) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(random(RANDOM_SEED) * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function capitalize(s) {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n}","/* eslint-disable complexity */\r\nclass Tile {\r\n    constructor(oldTile, isBomb, index) {\r\n        if (oldTile) {\r\n            this.setProps(oldTile);\r\n            return;\r\n        }\r\n        this.isBomb = isBomb;\r\n        this.status = 0;\r\n        this.index = index;\r\n        this.isOpened = false;\r\n        this.numBombs = 0;\r\n        this.isFlagged = false;\r\n    }\r\n\r\n    /** Setters **/\r\n\r\n    setStatus(status) {\r\n        this.status = status;\r\n    }\r\n\r\n    setIndex(index) {\r\n        this.index = index;\r\n    }\r\n\r\n    setCoords(coords) {\r\n        this.coords = coords;\r\n    }\r\n\r\n    click(game, gameMode) {\r\n        if (this.isOpened) {\r\n            game.openNeighbors(this);\r\n            return;\r\n        }\r\n\r\n        if (gameMode.flagging) {\r\n            this.flagTile();\r\n            return;\r\n        }\r\n\r\n        if (this.isFlagged) {\r\n            return;\r\n        }\r\n\r\n        if (this.isBomb) {\r\n            game.lose();\r\n            return;\r\n        }\r\n\r\n        game.clickTile(this);\r\n    }\r\n\r\n    setProps(oldTile) {\r\n        const keys = Object.keys(oldTile);\r\n        for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\r\n            const key = keys[keyIndex];\r\n            this[key] = oldTile[key];\r\n        }\r\n    }\r\n\r\n    incStatus() {\r\n        this.status++;\r\n    }\r\n\r\n    flagTile() {\r\n        this.isFlagged = !this.isFlagged;\r\n        this.incStatus();\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Tile;","/* eslint-disable no-use-before-define */\r\n/* eslint-disable complexity */\r\nimport { shuffle } from '../utils';\r\nimport Tile from './Tile';\r\n\r\nconst SAFE_TILES_CORNER = 4;\r\nconst SAFE_TILES_EDGE = 6;\r\nconst TWO_EDGES = 2;\r\n\r\n\r\nclass MinesweeperGame {\r\n    constructor(oldGameProps, newGameProps) {\r\n        if (oldGameProps) {\r\n\r\n            const keys = Object.keys(oldGameProps);\r\n\r\n            for (const index in keys) {\r\n                const key = keys[index];\r\n                this[key] = oldGameProps[key];\r\n            }\r\n\r\n            this.opened = new Set();\r\n            oldGameProps.board.forEach((tile) => {\r\n                if (tile.isOpened) {\r\n                    this.opened.add(tile.index);\r\n                }\r\n            });\r\n\r\n            this.board = oldGameProps.board.map((tileDict) => {\r\n                return new Tile(tileDict);\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        const { gameDifficulty, initialClickIndex, RANDOM_SEED } = newGameProps;\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = numBombs;\r\n        this.nonBombs = (rows * cols) - numBombs;\r\n        this.remaining = (rows * cols) - numBombs;\r\n        this.opened = new Set();\r\n        this.gameOver = false;\r\n        this.didWin = false;\r\n        this.difficulty = gameDifficulty;\r\n\r\n        if (this.bombs === 0) {\r\n            this.board = genNonBombs(rows * cols);\r\n        } else {\r\n            this.board = this.createBoard(gameDifficulty, initialClickIndex, RANDOM_SEED);\r\n            this.clickTile(this.board[initialClickIndex]);\r\n        }\r\n    }\r\n\r\n    createBoard(gameDifficulty, initialClick, RANDOM_SEED) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n        const pos = indexToPos(initialClick, this.difficulty);\r\n        const totalTiles = rows * cols;\r\n        const bombs = genBombs(numBombs);\r\n\r\n        let numSafe = 9;\r\n\r\n        if (isCorner(pos, this.difficulty)) {\r\n            numSafe = SAFE_TILES_CORNER;\r\n        } else if (isOnAnEdge(pos, this.difficulty)) {\r\n            numSafe = SAFE_TILES_EDGE;\r\n        }\r\n\r\n        const randomSafe = genNonBombs(totalTiles - numSafe - numBombs);\r\n        const randomizeBoard = shuffle(bombs.concat(randomSafe), RANDOM_SEED);\r\n\r\n        const finishedBoard = [...Array(rows)].map(() => Array(cols).fill(0));\r\n\r\n        iterateOverNeighbors(pos, this.difficulty, (coords) => {\r\n            finishedBoard[coords.row][coords.col] = new Tile(null, false);\r\n        });\r\n\r\n        let index = 0;\r\n        let index2 = 0;\r\n        iterateOverRowsCols(this.difficulty, (row, col) => {\r\n            if (!finishedBoard[row][col]) {\r\n                finishedBoard[row][col] = randomizeBoard[index];\r\n                index++;\r\n            }\r\n\r\n            finishedBoard[row][col].setStatus(0);\r\n            finishedBoard[row][col].setIndex(index2++);\r\n            finishedBoard[row][col].setCoords({ col: col, row: row });\r\n\r\n        });\r\n\r\n\r\n        this.calculateBombNumberForEachTile(finishedBoard, rows, cols);\r\n\r\n        return [].concat(...finishedBoard);\r\n    }\r\n\r\n    calculateBombNumberForEachTile(finishedBoard) {\r\n        iterateOverRowsCols(this.difficulty, (row, col) => {\r\n            if (!finishedBoard[row][col].isBomb) {\r\n                return;\r\n            }\r\n\r\n            const pos = { col: col, row: row };\r\n\r\n            iterateOverNeighbors(pos, this.difficulty, (coords) => {\r\n                finishedBoard[coords.row][coords.col].numBombs += 1;\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    clickTile(tile) {\r\n        this.updateTileStatus(tile.index);\r\n        this.openNonBombNeighbors(tile);\r\n    }\r\n\r\n    // flagTile(tileIndex) {\r\n    //     const curr = this.board[tileIndex];\r\n    //     const flaggedState = curr.isFlagged;\r\n    //     curr.isFlagged = !flaggedState;\r\n    //     this.updateTileStatus(tileIndex);\r\n    // }\r\n\r\n    indexWithinBounds(index) {\r\n        return index >= 0 && index < this.rows * this.cols;\r\n    }\r\n\r\n    isFlagged(index) {\r\n        return this.board[index].isFlagged;\r\n    }\r\n\r\n    neighborsWithFlags(tile) {\r\n        let numFlagged = 0;\r\n        iterateOverNeighbors(tile.coords, this.difficulty, (coords, index) => {\r\n            if (this.board[index].isFlagged) {\r\n                numFlagged++;\r\n            }\r\n        });\r\n\r\n        return numFlagged;\r\n    }\r\n\r\n    openNeighbors(tileToOpen) {\r\n        const numFlagged = this.neighborsWithFlags(tileToOpen);\r\n        const pos = tileToOpen.coords;\r\n        if (numFlagged === tileToOpen.numBombs) {\r\n            iterateOverNeighbors(pos, this.difficulty, (coords, index) => {\r\n                // let index = posToArrIndex(coords, this.difficulty);\r\n                if (this.indexWithinBounds(index)) {\r\n                    const tile = this.board[index];\r\n                    if (this.isFlagged(index)) {\r\n                        return;\r\n                    }\r\n                    if (tile.isOpened) {\r\n                        return;\r\n                    }\r\n                    this.clickTile(tile);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    decrementUsed(index) {\r\n        if (!this.opened.has(index)) {\r\n            this.remaining--;\r\n        }\r\n        this.opened.add(index);\r\n        if (this.opened.size === this.nonBombs) {\r\n            this.win();\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        return this.gameOver;\r\n    }\r\n\r\n    win() {\r\n        this.gameOver = true;\r\n        this.didWin = true;\r\n    }\r\n\r\n    lose() {\r\n        this.gameOver = true;\r\n    }\r\n\r\n    updateTileStatus(index) {\r\n        this.board[index].incStatus();\r\n    }\r\n\r\n    openNonBombNeighbors(tileToOpen) {\r\n        this.updateTileStatus(tileToOpen.index);\r\n\r\n        if (tileToOpen.isBomb) {\r\n            this.lose();\r\n            return;\r\n        }\r\n        const pos = tileToOpen.coords;\r\n        if (tileToOpen.isOpened) {\r\n            return;\r\n        }\r\n        this.board[tileToOpen.index].isOpened = true;\r\n\r\n\r\n        this.decrementUsed(tileToOpen.index);\r\n\r\n        if (tileToOpen.numBombs && tileToOpen.numBombs > 0) {\r\n            return;\r\n        }\r\n\r\n        iterateOverNeighbors(pos, this.difficulty, (coords, index) => {\r\n            const tileToOpen = this.board[index];\r\n            if (tileToOpen.isBomb) {\r\n                return;\r\n            }\r\n\r\n            this.openNonBombNeighbors(tileToOpen);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction iterateOverRowsCols(gameDifficulty, callback) {\r\n    for (let row = 0; row < gameDifficulty.rows; row++) {\r\n        for (let col = 0; col < gameDifficulty.cols; col++) {\r\n            callback(row, col);\r\n        }\r\n    }\r\n}\r\n\r\nfunction genNonBombs(numTiles) {\r\n    const tiles = [];\r\n\r\n\r\n    for (let count = 0; count < numTiles; count++) {\r\n        tiles.push(new Tile(null, false, count));\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\nfunction iterateOverNeighbors(pos, difficulty, callback) {\r\n    for (let xDelta = -1; xDelta <= 1; xDelta++) {\r\n        for (let yDelta = -1; yDelta <= 1; yDelta++) {\r\n            const coords = { col: pos.col + xDelta, row: pos.row + yDelta };\r\n            if (coords.col < 0 || coords.col >= difficulty.cols) {\r\n                continue;\r\n            }\r\n            if (coords.row < 0 || coords.row >= difficulty.rows) {\r\n                continue;\r\n            }\r\n\r\n            callback(coords, posToArrIndex(coords, difficulty));\r\n        }\r\n    }\r\n}\r\n\r\nfunction posToArrIndex(pos, difficulty) {\r\n    return (pos.row * difficulty.cols) + pos.col;\r\n}\r\n\r\n\r\nfunction indexToPos(index, difficulty) {\r\n    const row = Math.trunc(index / difficulty.cols);\r\n    const col = index - (row * difficulty.cols);\r\n\r\n    return { col: col, row: row };\r\n}\r\n\r\n\r\nfunction isCorner(pos, gameDifficulty) {\r\n    return numEdgesOfPos(pos, gameDifficulty) === TWO_EDGES;\r\n}\r\n\r\nfunction numEdgesOfPos(pos, gameDifficulty) {\r\n    const left = pos.row === 0;\r\n    const right = pos.row === gameDifficulty.rows - 1;\r\n    const top = pos.col === 0;\r\n    const bottom = pos.col === gameDifficulty.cols - 1;\r\n\r\n    let total = 0;\r\n    if (left || right) {\r\n        total++;\r\n    }\r\n    if (top || bottom) {\r\n        total++;\r\n    }\r\n\r\n    return total;\r\n}\r\n\r\nfunction isOnAnEdge(pos, gameDifficulty) {\r\n    return numEdgesOfPos(pos, gameDifficulty) > 0;\r\n}\r\n\r\nfunction genBombs(numBombs) {\r\n    const bombs = [];\r\n\r\n    for (let count = 0; count < numBombs; count++) {\r\n        bombs.push(new Tile(null, true));\r\n    }\r\n\r\n    return bombs;\r\n}\r\n\r\nexport default MinesweeperGame;","/* eslint-disable complexity */\r\n\r\nimport {\r\n    INITIALIZE_BOARD,\r\n    REMOVE_CACHED_BOARD,\r\n    UPDATE_BOARD,\r\n    UPDATE_TIMER,\r\n    TOGGLE_GAME_MODE,\r\n    START_GAME,\r\n    PAGE_LOADED_SETUP,\r\n    SWITCH_PAGES,\r\n    TOGGLE_PAUSE_GAME,\r\n    END_GAME,\r\n    SET_TUTORIAL_GAME_INDEX,\r\n    CONTINUE_GAME\r\n} from './actions';\r\nimport { EASY, MAIN_MENU, ALL_PAGES, HOW_TO_PLAY } from './Constants';\r\nimport MinesweeperGame from './Minesweeper/Minesweeper';\r\n\r\nconst initialState = {\r\n    gameProps: {\r\n        difficulty: EASY,\r\n        isPaused: false,\r\n        game: {\r\n            board: []\r\n        },\r\n        timeElapsed: 0,\r\n        isSet: false,\r\n    },\r\n    tutorialPage: {\r\n        gameIndex: 0,\r\n    },\r\n    pages: {}\r\n};\r\n\r\nexport const data = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case PAGE_LOADED_SETUP: {\r\n            ALL_PAGES.forEach((page) => {\r\n                state.pages[page] = false;\r\n            });\r\n            state.pages[MAIN_MENU] = true;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: { clicking: true, flagging: false },\r\n                    isPaused: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        case INITIALIZE_BOARD: {\r\n            const { game } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                    isSet: true,\r\n                    update: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: { clicking: true, flagging: false },\r\n                    isPaused: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        case UPDATE_BOARD: {\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                }\r\n            };\r\n        }\r\n\r\n        case UPDATE_TIMER: {\r\n            const { timeElapsed } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    timeElapsed: timeElapsed,\r\n                }\r\n            };\r\n        }\r\n\r\n        case TOGGLE_PAUSE_GAME: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    isPaused: !state.gameProps.isPaused,\r\n                }\r\n            };\r\n        }\r\n\r\n        case REMOVE_CACHED_BOARD: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    isSet: false,\r\n                    game: {\r\n                        board: [],\r\n                    },\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                },\r\n            };\r\n        }\r\n\r\n        case TOGGLE_GAME_MODE: {\r\n            const newMode = {\r\n                clicking: !state.gameProps.gameMode.clicking,\r\n                flagging: !state.gameProps.gameMode.flagging\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: newMode,\r\n                }\r\n            };\r\n        }\r\n\r\n        case START_GAME: {\r\n            const { difficulty } = payload;\r\n\r\n            const game = new MinesweeperGame(null, {\r\n                gameDifficulty: {\r\n                    ...difficulty,\r\n                    numBombs: 0,\r\n                },\r\n            });\r\n\r\n            console.log(game);\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    difficulty: difficulty,\r\n                    game: game,\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: { clicking: true, flagging: false }\r\n                }\r\n            };\r\n        }\r\n\r\n        case SWITCH_PAGES: {\r\n            const { PAGE } = payload;\r\n\r\n            ALL_PAGES.forEach((page) => {\r\n                state['pages'][page] = page === PAGE;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n\r\n        case END_GAME: {\r\n            const { didWin } = payload;\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    win: didWin,\r\n                    loss: !didWin,\r\n                }\r\n            };\r\n        }\r\n\r\n        case SET_TUTORIAL_GAME_INDEX: {\r\n            const { index } = payload;\r\n            return {\r\n                ...state,\r\n                tutorialPage: {\r\n                    gameIndex: index,\r\n                }\r\n            };\r\n        }\r\n\r\n        case CONTINUE_GAME: {\r\n\r\n            const game = new MinesweeperGame(state.gameProps.game);\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                }\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { data } from './reducers';\r\n\r\nconst reducers = {\r\n    data,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () =>\r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport './Shared.css';\r\nimport { switchPages } from './actions';\r\nimport { MAIN_MENU } from './Constants';\r\n\r\nconst LogoContainer = styled.div`\r\n    width:100%;\r\n    background:lightgray;\r\n    text-align:center;\r\n    font-style: italic;\r\n`;\r\n\r\nconst LogoText = styled.p`\r\n`;\r\n\r\nconst Logo = ({ openMainMenu }) => (\r\n    <LogoContainer >\r\n        <LogoText onClick={openMainMenu} style={{ fontFamily: 'Pacifico', fontSize: 'xxx-large', margin: '0px 0px 10px', cursor: 'pointer' }}>Lorne's Minesweeper</LogoText>\r\n    </LogoContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    openMainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Logo);","export const getTimeElapsed = (state) => {\r\n    return state.data.gameProps.timeElapsed;\r\n};\r\n\r\nexport const isPaused = (state) => {\r\n    return state.data.gameProps.isPaused;\r\n};\r\n\r\nexport const getBoard = (state) => {\r\n    return state.data.gameProps.game.board;\r\n};\r\n\r\nexport const plsRerender = (state) => {\r\n    return state.data.gameProps.shouldRerender;\r\n};\r\n\r\nexport const getGame = (state) => {\r\n    return state.data.gameProps.game;\r\n};\r\n\r\nexport const getIsSet = (state) => {\r\n    return state.data.gameProps.isSet;\r\n};\r\n\r\nexport const getStartTime = (state) => {\r\n    return state.data.gameProps.startTime;\r\n};\r\n\r\nexport const getCurrentTime = (state) => {\r\n    return state.data.gameProps.now;\r\n};\r\n\r\nexport const getGameMode = (state) => {\r\n    return state.data.gameProps.gameMode;\r\n};\r\n\r\nexport const getGameDifficulty = (state) => {\r\n    return state.data.gameProps.difficulty;\r\n};\r\n\r\nexport const isPageSelected = (state, page) => {\r\n    return state.data.pages[page];\r\n};\r\n\r\nexport const previousGameExists = (state) => {\r\n    return state.data.gameProps.game.board.length > 0;\r\n};\r\n\r\nexport const getRemainingBombs = (state) => {\r\n    const numFlagged = state.data.gameProps.game.board.filter((tile) => tile.isFlagged).length;\r\n    const totalBombs = state.data.gameProps.difficulty.numBombs;\r\n    return Math.max(0, totalBombs - numFlagged);\r\n};\r\nexport const getWin = (state) => {\r\n    return state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n};\r\nexport const getLoss = (state) => {\r\n    return !state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n};\r\nexport const gameOver = (state) => {\r\n    return state.data.gameProps.game.gameOver;\r\n};\r\n\r\nexport const changed = (state, ownProps) => {\r\n    return state.data.gameProps.game.board[ownProps.index].status;\r\n};\r\n\r\nexport const getTile = (state, ownProps) => {\r\n    return state.data.gameProps.game.board[ownProps.index];\r\n};\r\n\r\nexport const getTutorialGameIndex = (state) => {\r\n    return state.data.tutorialPage.gameIndex;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    isPageSelected,\r\n    previousGameExists,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { switchPages, continueGame } from '../../actions';\r\nimport { MAIN_MENU, IN_GAME, SETUP_NEW_GAME, HOW_TO_PLAY } from '../../Constants';\r\nimport './Buttons.css'\r\n\r\nconst MainMenuContainer = styled.div`\r\n    display:${props => !!props.inSetupMode ? \"none\" : \"inline-grid\"};\r\n`;\r\n\r\nconst StyledMainMenuButton = styled.div`\r\n`;\r\n\r\n\r\nconst MainMenu = ({ continuePreviousGame, inSetupMode, setupNewGame, inMainMenu, continueGame, switchToInGame, showHowToPlay }) => {\r\n\r\n    return <div style={{ display: inMainMenu ? \"\" : \"none\", marginTop: \"20px\" }}>\r\n\r\n        <MainMenuContainer inSetupMode={inSetupMode}>\r\n            <StyledMainMenuButton className=\"button\" onClick={() => { continueGame(); switchToInGame(); }} style={{ display: `${continuePreviousGame ? \"\" : \"none\"}` }} ><span>Continue Game </span></StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" onClick={setupNewGame}><span>New Game </span></StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" ><span>Settings</span> </StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" onClick={showHowToPlay}> <span>How To Play </span> </StyledMainMenuButton>\r\n        </MainMenuContainer>\r\n    </div >\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    continuePreviousGame: previousGameExists(state) && !gameOver(state),\r\n    inMainMenu: isPageSelected(state, MAIN_MENU),\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setupNewGame: () => dispatch(switchPages(SETUP_NEW_GAME)),\r\n    continueGame: () => dispatch(continueGame()),\r\n    switchToInGame: () => dispatch(switchPages(IN_GAME)),\r\n    showHowToPlay: () => dispatch(switchPages(HOW_TO_PLAY)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { EASY, MEDIUM, HARD, DIFFICULTIES, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport { removeCachedBoard, startGame, switchPages } from '../../actions';\r\nimport {\r\n    isPageSelected,\r\n} from '../../selectors';\r\n\r\nimport './GameSetup.css'\r\n\r\nimport { capitalize } from '../../utils'\r\n\r\nconst GameSetupContainer = styled.div`\r\n    display: ${props => props.inSetupMode ? \"inline-grid\" : \"none\"};\r\n`;\r\n\r\n\r\nconst GameSetup = ({ localRemoveCachedBoard, startGame, inSetupMode, switchToGame }) => {\r\n\r\n\r\n    const startNewGame = () => {\r\n\r\n        const gameDifficultySelector = document.querySelectorAll('input[name=\\'gameDifficulty\\']');\r\n        let selectedValue;\r\n        for (const difficultyOption of gameDifficultySelector) {\r\n            if (difficultyOption.checked) {\r\n                selectedValue = difficultyOption.value;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let gameDifficulty = null;\r\n\r\n        if (selectedValue === EASY.key) {\r\n            gameDifficulty = EASY;\r\n        }\r\n        else if (selectedValue === MEDIUM.key) {\r\n            gameDifficulty = MEDIUM;\r\n        } else if (selectedValue === HARD.key) {\r\n            gameDifficulty = HARD;\r\n        }\r\n\r\n        if (gameDifficulty) {\r\n            localRemoveCachedBoard();\r\n            startGame(gameDifficulty);\r\n            switchToGame();\r\n        }\r\n    }\r\n\r\n    return <GameSetupContainer inSetupMode={inSetupMode} style={{ marginTop: 20 }}>\r\n        {\r\n            Object.keys(DIFFICULTIES).map((key) => {\r\n                const difficulty = DIFFICULTIES[key];\r\n                const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`\r\n                return <label key={key} className=\"container\">{msg}\r\n                    <input type=\"radio\" id={key} name=\"gameDifficulty\" value={key} />\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n            })\r\n        }\r\n\r\n        <div id=\"testbutton\" onClick={() => {\r\n            startNewGame();\r\n        }}></div>\r\n\r\n    </GameSetupContainer>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    startGame: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n    switchToGame: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameSetup);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    isPaused,\r\n    getTimeElapsed,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\n\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nimport { updateTimer } from \"../../actions\";\r\n\r\nconst TimerWrapper = styled.div``;\r\n\r\nlet firstPause = false;\r\n\r\nconst Timer = ({ timeElapsed, isPaused, updateTimer, inGame, inGameFirstClick, gameOver }) => {\r\n\r\nif (gameOver) return <div>{timeElapsed}</div>;\r\n\r\n    let incrementTimer = () => {\r\n        setTimeout(() => {\r\n            if (inGame && !isPaused && !firstPause)\r\n                updateTimer(timeElapsed + 1);\r\n        }, 1000)\r\n    };\r\n\r\n    if (inGame && !isPaused)\r\n        incrementTimer();\r\n    else if (inGameFirstClick)\r\n        updateTimer(0);\r\n\r\n    if (!isPaused) firstPause = false;\r\n    else if (!firstPause && isPaused) {\r\n        firstPause = true;\r\n    }\r\n\r\n    return <TimerWrapper>{timeElapsed}</TimerWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeElapsed: getTimeElapsed(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    inGameFirstClick: isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateTimer: (timeElapsed) => dispatch(updateTimer(timeElapsed)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","/* eslint-disable complexity */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { faMousePointer, faFlag, faRedo, faHome, faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    getGame,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    getRemainingBombs,\r\n    isPaused,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport {\r\n    startGame,\r\n    removeCachedBoard,\r\n    toggleGameMode,\r\n    switchPages,\r\n    togglePauseGame,\r\n\r\n} from '../../actions';\r\nimport Timer from './Timer';\r\nimport { MAIN_MENU, IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nconst InGameMenuWrapper = styled.div`\r\n    display:flex;\r\n    margin:15px;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst InGameMenu = ({\r\n    gameMode, isPaused, gameDifficulty, toggleGameMode, inGameFirstClick,\r\n    localRemoveCachedBoard, startGame, mainMenu, remainingBombs,\r\n    toggledPause, inGame, gameOver\r\n}) => {\r\n\r\n    return <InGameMenuWrapper>\r\n        <FontAwesomeIcon\r\n            size='2x'\r\n            icon={faHome}\r\n            onClick={() => {\r\n                mainMenu();\r\n            }} />\r\n        <Timer />\r\n        <div>{remainingBombs}</div>\r\n\r\n        <FontAwesomeIcon\r\n            size='2x'\r\n            style={{ display: `${!gameOver ? '' : 'none'}` }}\r\n            icon={gameMode.flagging ? faFlag : faMousePointer}\r\n            onClick={\r\n                () => {\r\n                    toggleGameMode();\r\n                }\r\n            }\r\n        />\r\n\r\n        <FontAwesomeIcon\r\n            style={{\r\n                display: `${inGame && !gameOver ? '' : 'none'}`\r\n            }}\r\n            size='2x'\r\n            icon={isPaused ? faPlay : faPause}\r\n            onClick={toggledPause}\r\n        />\r\n\r\n        <FontAwesomeIcon size='2x' icon={faRedo} onClick={() => {\r\n            localRemoveCachedBoard();\r\n            inGameFirstClick();\r\n            startGame(gameDifficulty);\r\n        }} />\r\n\r\n    </InGameMenuWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    game: getGame(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    remainingBombs: getRemainingBombs(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    mainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n    startGame: (gameDifficulty) => dispatch(startGame(gameDifficulty)),\r\n    inGameFirstClick: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggledPause: () => dispatch(togglePauseGame()),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InGameMenu);","/* eslint-disable max-len */\r\nexport const BOMB_TILE = 'https://apprecs.org/ios/images/app-icons/256/e7/451931111.jpg';\r\nexport const HINT_TILES = [\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Minesweeper_0.svg/2000px-Minesweeper_0.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Minesweeper_1.svg/2000px-Minesweeper_1.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Minesweeper_2.svg/2000px-Minesweeper_2.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Minesweeper_3.svg/2000px-Minesweeper_3.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Minesweeper_4.svg/2000px-Minesweeper_4.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Minesweeper_5.svg/2000px-Minesweeper_5.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Minesweeper_6.svg/2000px-Minesweeper_6.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Minesweeper_7.svg/2000px-Minesweeper_7.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Minesweeper_8.svg/2000px-Minesweeper_8.svg.png',\r\n];\r\n\r\nexport const FLAG_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Minesweeper_flag.svg/2000px-Minesweeper_flag.svg.png';\r\nexport const UNOPENED_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Minesweeper_unopened_square.svg/1024px-Minesweeper_unopened_square.svg.png';","/* eslint-disable complexity */\r\n/* eslint-disable func-style */\r\n\r\nimport styled from 'styled-components';\r\nimport { BOMB_TILE, HINT_TILES, FLAG_TILE, UNOPENED_TILE } from './ImageUrls';\r\n\r\nconst BombImage = function () {\r\n    this.url = BOMB_TILE;\r\n};\r\n\r\nconst OpenedImage = function (numBombs) {\r\n    this.url = HINT_TILES[numBombs];\r\n};\r\n\r\nconst FlaggedImage = function () {\r\n    this.url = FLAG_TILE;\r\n};\r\n\r\nconst UnopenedImage = function () {\r\n    this.url = UNOPENED_TILE;\r\n};\r\n\r\nfunction TileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (tile.isOpened && tile.isBomb) {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nfunction GameOverTileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (!tile.isOpened && !tile.isFlagged && tile.isBomb) {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nconst timeImageFactory = new TileImageFactory();\r\nconst gameOverImageFactory = new GameOverTileImageFactory();\r\n\r\n\r\nconst TileImage = styled.div`\r\ncontent: url(${(props) => {\r\n        return props.gameOver ? gameOverImageFactory.createImage(props.tile) : timeImageFactory.createImage(props.tile);\r\n    }});\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nexport default TileImage;","/* eslint-disable react/prop-types */\r\n/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\n\r\nimport { faFlag, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TileImage from './TileImageFactory';\r\nimport { connect } from 'react-redux';\r\nimport { getTile, changed } from '../selectors';\r\n\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst Tile = ({ tile, gameMode, click, gameOver }) => {\r\n\r\n    return <TileWrapper\r\n        onClick={() => {\r\n            click(tile);\r\n        }}>\r\n\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} gameOver={gameOver} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${!gameOver && gameMode.flagging && !tile.isOpened && !tile.isFlagged ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${gameOver && tile.isFlagged && !tile.isBomb ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '12',\r\n            top: '10',\r\n        }} icon={faTimes} />\r\n    </TileWrapper>;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    tile: getTile(state, ownProps),\r\n    changed: changed(state, ownProps),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Tile);\r\n\r\n// export default Tile;","/* eslint-disable complexity */\r\n/* eslint-disable react/prop-types */\r\n\r\nimport React from 'react';\r\nimport TileIcon from '../../Minesweeper/TileIcon';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    getBoard,\r\n    getIsSet,\r\n    getGame,\r\n    plsRerender,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    isPaused,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { initializeBoard, updateBoard, removeCachedBoard, toggleGameMode, startGame, switchPages, } from '../../actions';\r\n\r\nimport MinesweeperGame from '../..//Minesweeper/Minesweeper';\r\nimport { IN_GAME } from '../../Constants';\r\n\r\nlet first = true;\r\n\r\nconst GameWrapper = styled.div`\r\n    display: inline-grid;\r\n    visibility: ${(props) => props.isPaused ? 'hidden' : ''};\r\n    grid-template-columns: repeat(${(props) => props.gameDifficulty ? props.gameDifficulty.cols : 0},1fr);\r\n`;\r\n\r\nconst Game = ({\r\n    // state\r\n    game, isSet, gameMode, gameDifficulty, isPaused, gameOver,\r\n    // actions\r\n    performInitialSetup, updateBoard, firstClick, toggleGameMode,\r\n}) => {\r\n\r\n    if (first && isSet) {\r\n        window.addEventListener('keydown', (event) => {\r\n            if (event.key === 'F' || event.key === 'f') {\r\n                if (gameOver) {\r\n                    return;\r\n                }\r\n                toggleGameMode();\r\n            }\r\n        }, false);\r\n        first = false;\r\n    }\r\n\r\n    const initialTileClick = (tile) => {\r\n        const newGame = new MinesweeperGame(null, {\r\n            gameDifficulty: gameDifficulty,\r\n            initialClickIndex: tile.index\r\n        });\r\n        performInitialSetup(newGame);\r\n        firstClick();\r\n    };\r\n\r\n    return <GameWrapper isPaused={isPaused} gameDifficulty={gameDifficulty}>\r\n        {\r\n            game.board.map((tile) => {\r\n                return <TileIcon\r\n                    key={tile.index}\r\n                    index={tile.index}\r\n                    gameMode={gameMode}\r\n                    gameOver={gameOver}\r\n                    click={() => {\r\n                        if (gameOver) {\r\n                            return;\r\n                        }\r\n\r\n                        if (!isSet) {\r\n                            initialTileClick(tile);\r\n                            return;\r\n                        }\r\n\r\n                        tile.click(game, gameMode);\r\n                        updateBoard();\r\n                    }}\r\n                />;\r\n            })\r\n        }\r\n    </GameWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    isPaused: isPaused(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    performInitialSetup: (newGame) => dispatch(initializeBoard(newGame)),\r\n    firstClick: () => dispatch(switchPages(IN_GAME)),\r\n    updateBoard: () => dispatch(updateBoard()),\r\n    removeCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport InGameMenu from './InGameMenu';\r\nimport Game from './Game';\r\nimport { isPageSelected, getWin, getLoss, gameOver } from '../../selectors';\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Win = styled.div`\r\n    display:${props => props.win ? \"\" : \"none\"};\r\n`;\r\n\r\nconst Loss = styled.div`\r\n    display:${props => props.loss ? \"\" : \"none\"};\r\n`;\r\n\r\nconst GameDisplay = ({\r\n    inGame, win, loss\r\n}) => {\r\n\r\n\r\n\r\n    return <div style={{ display: inGame ? \"inline-block\" : \"none\" }} >\r\n        <InGameMenu />\r\n        <Win win={win}>\r\n            <iframe title=\"winGIF\" src=\"https://giphy.com/embed/peAFQfg7Ol6IE\" width=\"480\" height=\"455\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You found all the bombs!! (You win)</p>\r\n        </Win>\r\n        <Loss loss={loss}>\r\n            <iframe title=\"lossGIF\" src=\"https://giphy.com/embed/oe33xf3B50fsc\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You clicked a bomb!</p>\r\n        </Loss>\r\n        <Game />\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inGame: isPageSelected(state, IN_GAME) || isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    win: getWin(state),\r\n    loss: getLoss(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameDisplay);","/* eslint-disable react/prop-types */\r\n/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TileImage from './TileImageFactory';\r\n\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst DemoTile = ({ tile, showFlag }) => {\r\n\r\n    const hasColor = { outline: `${tile.color} 3px solid`, zIndex: 2 };\r\n    const noColor = {};\r\n    return <TileWrapper\r\n        style={tile.color ? hasColor : noColor}\r\n    >\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${showFlag ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\nexport default DemoTile;","/* eslint-disable react/prop-types */\r\n/* eslint-disable brace-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { DIFFICULTIES, EASY, HOW_TO_PLAY } from '../../Constants';\r\nimport { capitalize } from '../../utils';\r\nimport './HowToPlay.css';\r\nimport MinesweeperGame from '../../Minesweeper/Minesweeper';\r\nimport DemoTile from '../../Minesweeper/DemoTile';\r\nimport { faArrowCircleLeft, faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    isPageSelected,\r\n    getTutorialGameIndex,\r\n} from '../../selectors';\r\n\r\nimport {\r\n    setTutorialGameIndex\r\n} from '../../actions';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst DemoBoard = styled.div`\r\n    display: inline-grid;\r\n    grid-template-columns: repeat(${EASY.cols},1fr);\r\n`;\r\n\r\nconst emptyBoard = new MinesweeperGame(null, {\r\n    gameDifficulty: {\r\n        ...EASY,\r\n        numBombs: 0,\r\n    }\r\n}, null).board;\r\n\r\nconst moves = [\r\n    (game) => { game.board[5].flagTile(); },\r\n    (game) => { game.board[41].flagTile(); },\r\n    (game) => { game.clickTile(game.board[50]); },\r\n    (game) => { game.openNeighbors(game.board[50]); },\r\n    (game) => { game.board[22].flagTile(); },\r\n    (game) => { game.board[31].flagTile(); },\r\n    (game) => { game.board[61].flagTile(); },\r\n    (game) => { game.openNeighbors(game.board[14]); },\r\n    (game) => { game.openNeighbors(game.board[23]); },\r\n    (game) => { game.openNeighbors(game.board[53]); },\r\n    (game) => { game.openNeighbors(game.board[62]); },\r\n    (game) => { game.openNeighbors(game.board[70]); },\r\n    (game) => { game.board[68].flagTile(); },\r\n    (game) => { game.openNeighbors(game.board[59]); },\r\n    (game) => { game.openNeighbors(game.board[77]); },\r\n    (game) => { game.clickTile(game.board[21]); },\r\n    (game) => { game.clickTile(game.board[57]); },\r\n    (game) => { game.clickTile(game.board[30]); },\r\n    (game) => { game.openNeighbors(game.board[30]); },\r\n    (game) => { game.board[12].flagTile(); },\r\n    (game) => { game.board[48].flagTile(); },\r\n    (game) => { game.openNeighbors(game.board[11]); },\r\n    (game) => { game.openNeighbors(game.board[47]); },\r\n    (game) => { game.openNeighbors(game.board[57]); },\r\n    (game) => { game.openNeighbors(game.board[56]); },\r\n    (game) => { game.board[54].flagTile(); },\r\n    (game) => { game.board[75].flagTile(); },\r\n    (game) => { game.openNeighbors(game.board[64]); },\r\n    (game) => { game.openNeighbors(game.board[65]); },\r\n];\r\n\r\n\r\nconst movesForEachDemoBoard = [\r\n    { moves: 0 },\r\n    { moves: 2, tilesToHighlight: [{ index: 5, color: 'blue' }, { index: 41, color: 'blue' }] },\r\n    { moves: 2, tilesToHighlight: [{ index: 42, color: 'blue' }] },\r\n    { moves: 3, tilesToHighlight: [{ index: 50, color: 'blue' }] },\r\n    { moves: 4 },\r\n    { moves: 7, tilesToHighlight: [{ index: 22, color: 'blue' }, { index: 31, color: 'blue' }, { index: 61, color: 'blue' }] },\r\n    { moves: 12 },\r\n    { moves: 13, tilesToHighlight: [{ index: 68, color: 'blue' }] },\r\n    { moves: 15, tilesToHighlight: [{ index: 59, color: 'blue' }, { index: 69, color: 'blue' }, { index: 77, color: 'blue' }] },\r\n    { moves: 15, tilesToHighlight: [{ index: 4, color: 'blue' }] },\r\n    { moves: 15, tilesToHighlight: [{ index: 4, color: 'blue' }, { index: 3, color: 'red' }, { index: 12, color: 'red' }] },\r\n    { moves: 15, tilesToHighlight: [{ index: 21, color: 'blue' }] },\r\n    { moves: 16 },\r\n    { moves: 16, tilesToHighlight: [{ index: 76, color: 'blue' }] },\r\n    { moves: 16, tilesToHighlight: [{ index: 66, color: 'red' }, { index: 75, color: 'red' }] },\r\n    { moves: 16, tilesToHighlight: [{ index: 66, color: 'red' }, { index: 67, color: 'blue' }, { index: 75, color: 'red' }] },\r\n    { moves: 16, tilesToHighlight: [{ index: 57, color: 'black' }, { index: 66, color: 'red' }, { index: 67, color: 'blue' }, { index: 75, color: 'red' }] },\r\n    { moves: 17 },\r\n    { moves: 17, tilesToHighlight: [{ index: 39, color: 'red' }, { index: 48, color: 'red' }, { index: 49, color: 'blue' }] },\r\n    { moves: 17, tilesToHighlight: [{ index: 39, color: 'red' }, { index: 40, color: 'green' }, { index: 48, color: 'red' }, { index: 49, color: 'blue' }] },\r\n    { moves: 17, tilesToHighlight: [{ index: 30, color: 'black' }, { index: 39, color: 'red' }, { index: 40, color: 'green' }, { index: 48, color: 'red' }, { index: 49, color: 'blue' }] },\r\n    { moves: 18 },\r\n    { moves: 18, tilesToHighlight: [{ index: 30, color: 'blue' }] },\r\n    { moves: 19 },\r\n    { moves: 21 },\r\n    { moves: 21, tilesToHighlight: [{ index: 12, color: 'red' }, { index: 48, color: 'red' }] },\r\n    { moves: 25 },\r\n    { moves: 27 },\r\n    { moves: 29 }\r\n];\r\n\r\nconst SEED = 123123;\r\nemptyBoard[25].color = 'blue';\r\nconst boards = [emptyBoard];\r\n\r\nmovesForEachDemoBoard.map((boardInfo) => {\r\n    const game = new MinesweeperGame(null, {\r\n        gameDifficulty: EASY,\r\n        initialClickIndex: 25,\r\n        RANDOM_SEED: SEED\r\n    });\r\n    const moveCount = boardInfo.moves;\r\n    const tilesToHighlight = boardInfo.tilesToHighlight;\r\n\r\n    for (let moveIndex = 0; moveIndex < moveCount; moveIndex++) {\r\n        moves[moveIndex](game);\r\n    }\r\n\r\n\r\n    const board = game.board;\r\n\r\n    if (tilesToHighlight) {\r\n        tilesToHighlight.forEach((tileToHighlight) => {\r\n            board[tileToHighlight.index].color = tileToHighlight.color;\r\n        });\r\n    }\r\n\r\n    boards.push(board);\r\n});\r\n\r\n\r\nconst demoBoardMessages = [\r\n    'The first click on the board is always safe, so you can click any of the empty tiles to start. To get a maximum amount of open tiles, a non-edge tile is recommended. We chose to click the highlighted tile',\r\n    'After the first click, a board may look like this, Certain tiles on this board can already be determined to be bombs. Can you see which?',\r\n    'Since the tiles with a one inside are next to only 1 non-opened tiles, the unopened tile MUST be a bomb. As such they are flagged',\r\n    'When all of a tile\\'s bomb count is met, the remaining tiles must be safe. These can be opened by pressing the unopened tile or by clicking the hint tile. WARNING: If you click a bomb tile or a hint tile with incorrectly flagged tiles, you will detonate a bomb and lose!',\r\n    'The one tile adjacent to our previous click also has its conditions met, so it can be clicked to open additional tiles.',\r\n    'Now, we have removed all the tiles known to not be bombs. In doing so, we have revealed additional tiles known to be bombs.',\r\n    'Three new flags (aka bombs) have been added. This is because the red three and the green two were adjacent to 3 and 2 unopened tiles respectively. As such, we know that those tiles must be bombs. With these flags we can opened some safe tiles.',\r\n    'All safe tiles have been opened. Go back if it is unclear which were opened. We can now flag an additional tile. Can you see which?',\r\n    'The green two here, after opening safe tiles, became adjacent to only two unopened tiles, as such both of these tiles must be bombs. We can now open some additional tiles',\r\n    'These tiles were clicked to open safe tiles.',\r\n    'After opening the safe tiles, we may appear to be stuck, however, there is a strategy that may be of use. Look at the highlighted tile. The top two has one known bomb and two unopened tiles adjacent to it. We do not know which of these two unopened tiles is the bomb, yet one of them must be. ',\r\n    'While the specific tile is not known, the red three below is adjacent to both of these candidate bomb tiles(highlighted in red). This red three is already next to two known bombs, so while two of its neighbors may be a bomb, the last remaining tile CANNOT be a bomb. Therefore, the last tile must be safe.',\r\n    'With the same logic in mind, we know another tile that is safe to click. ',\r\n    'We will follow a similar thought process to find the next tile to open',\r\n    'Look at the highlighted green two tile. It is adjacent to one known bomb. So there must be another bomb nearby.',\r\n    'It can be either of the red highlighted candidate tiles.',\r\n    'Now look at the highlighted green two. This tile is next to the known bomb(the adjacent flag tile). Furthermore, it is also next to the the two red candidate tiles, of which only one can be the bomb. Luckily, we do not care which is the bomb, only that it is one of the two.',\r\n    'The black highlighted tile MUST be safe to click since it cannot be a bomb. If it were a bomb, the highlighted green two would be a red three',\r\n    'We can also open another tile this way',\r\n    'Highlighted tile with its candidate tiles',\r\n    'The green highlighted tile is touching two known bombs and the red highlighted candidate tiles, of which one is a bomb.',\r\n    'The black tile is free to click.',\r\n    '',\r\n    'The newly opened green two\\'s neighbors can be explored since its conditions are satisfed.',\r\n    'a',\r\n    'After clicking the tile, we get a fairly open board. From here, two flags can be placed',\r\n    'The two flagged tiles are highlighted in red. Several tiles have now met their bomb',\r\n    'd',\r\n    'e',\r\n    'f'\r\n];\r\n\r\nconst showBoard = (board) => {\r\n    return (\r\n        <DemoBoard>\r\n            {\r\n                !board ? <div></div> :\r\n                    board.map((tile) => {\r\n                        return <DemoTile\r\n                            key={`${tile.index}_empty`}\r\n                            index={tile.index}\r\n                            tile={tile}\r\n                        />;\r\n                    })\r\n            }\r\n        </DemoBoard>\r\n    );\r\n};\r\n\r\nconst HowToPlay = ({ inHowToPlay, tutorialGameIndex, setTutorialGameIndex }) => {\r\n    const TypesOfTiles = [];\r\n    TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: false }} />, msg: 'Unopened' });\r\n    const maxBombs = 8;\r\n    for (let hintTileIndex = 0; hintTileIndex <= maxBombs; hintTileIndex++) {\r\n        TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: true, numBombs: hintTileIndex }} />, msg: `${hintTileIndex} bombs` });\r\n    }\r\n\r\n    TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: true, isBomb: true }} />, msg: 'Bomb tile' });\r\n\r\n    TypesOfTiles.push({ tile: <DemoTile tile={{ isOpened: false, isFlagged: true }} />, msg: 'Flagged tile' });\r\n\r\n\r\n    return <div style={{ display: inHowToPlay ? 'inline-block' : 'none', width: '1000px' }}>\r\n        <h1>How To Play Minesweeper(IN PROGRESS OF BEING BUILT)</h1>\r\n        <span>The objective of Minesweeper is to clear all tiles on the game board that do not contain a bomb (hence the name Minesweeper).</span>\r\n        <p>There are 3 classic difficulting settings:</p>\r\n        <ul>\r\n            {\r\n                Object.keys(DIFFICULTIES).map((key) => {\r\n                    const difficulty = DIFFICULTIES[key];\r\n                    const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`;\r\n                    return <li key={key} className='container'>{msg} </li>;\r\n                })\r\n            }\r\n        </ul>\r\n        <div>Show 9 tiles to portray adjacent</div>\r\n        <h2>1. Types of tiles</h2>\r\n        <p>The game board will consists of the following types</p>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            {\r\n                TypesOfTiles.map((child) => {\r\n                    return <div key={child.msg}>\r\n                        {child.tile}\r\n                        <p>{child.msg} </p>\r\n                    </div>;\r\n                })\r\n            }\r\n        </div>\r\n        <p>The number tiles reflect the number of bombs in an adjacent tile (including diagonals)</p>\r\n\r\n        <br /> <br /> <br /> <br />\r\n        <h2>2. How to find bombs</h2>\r\n        {\r\n            showBoard(boards[tutorialGameIndex])\r\n        }\r\n        <p>{demoBoardMessages[tutorialGameIndex]}</p>\r\n\r\n        <div>\r\n            <FontAwesomeIcon\r\n                icon={faArrowCircleLeft}\r\n                size='2x'\r\n                onClick={() => {\r\n                    setTutorialGameIndex(tutorialGameIndex - 1);\r\n                }}\r\n                style={{ display: `${!tutorialGameIndex ? 'none' : ''}` }}\r\n            />\r\n            <FontAwesomeIcon\r\n                icon={faArrowCircleRight}\r\n                size='2x'\r\n                onClick={() => {\r\n                    setTutorialGameIndex(tutorialGameIndex + 1);\r\n                }}\r\n                style={{\r\n                    display: `${tutorialGameIndex === boards.length - 1 ? 'none' : ''}`\r\n                }}\r\n\r\n            />\r\n        </div>\r\n\r\n        <br /><br />\r\n        <p>TODO: Highlight certain tiles to showcase point, put same game for practice</p>\r\n\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inHowToPlay: isPageSelected(state, HOW_TO_PLAY),\r\n    tutorialGameIndex: getTutorialGameIndex(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setTutorialGameIndex: (index) => dispatch(setTutorialGameIndex(index)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HowToPlay);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { pageLoadedSetup } from './actions'\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport Logo from './Logo';\r\nimport MainMenu from './Pages/MainMenu/MainMenu';\r\nimport GameSetup from './Pages/GameSetup/GameSetup';\r\nimport GameDisplay from './Pages/InGame/GameDisplay';\r\nimport HowToPlay from './Pages/HowToPlay/HowToPlay';\r\n\r\nconst Pages = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst App = ({ pageLoadedSetup }) => {\r\n    return <div className=\"App-Wrapper unselectable\" onLoad={pageLoadedSetup}>\r\n        <div className=\"App\">\r\n            <Logo />\r\n            <Pages>\r\n                <MainMenu />\r\n                <GameSetup />\r\n                <GameDisplay />\r\n                <HowToPlay />\r\n            </Pages>\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pageLoadedSetup: () => dispatch(pageLoadedSetup()),\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport App from './App.js';\r\n\r\n\r\nconst store = configureStore();\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate\r\n            loading={<div>Loading...</div>}\r\n            persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));"],"sourceRoot":""}