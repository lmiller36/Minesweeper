{"version":3,"sources":["actions.js","Constants.js","Minesweeper/Minesweeper.js","utils.js","reducers.js","store.js","Logo.js","selectors.js","Pages/MainMenu/MainMenu.js","Pages/GameSetup/GameSetup.js","Pages/InGame/Timer.js","Pages/InGame/InGameMenu.js","Minesweeper/ImageUrls.js","Minesweeper/TileImageFactory.js","Minesweeper/Tile.js","Pages/InGame/Game.js","Pages/InGame/GameDisplay.js","App.js","index.js"],"names":["toggleGameMode","now","type","payload","startGame","difficulty","switchPages","PAGE","EASY","rows","cols","numBombs","key","MEDIUM","HARD","DIFFICULTIES","ALL_PAGES","bombTile","safeTile","isBomb","tile","genNonBombs","numTiles","includeIndex","toInsert","tiles","count","push","index","MinesweeperGame","gameDifficulty","initialClick","this","bombs","nonBombs","remaining","opened","Set","gameOver","didWin","board","createBoard","clickTile","pos","indexToPos","totalTiles","genBombs","numSafe","isCorner","isOnAnEdge","randomSafe","randomizeBoard","arr","i","length","j","Math","floor","random","shuffle","concat","finishedBoard","Array","map","fill","iterateOverNeighbors","coords","y","x","iterateOverRowsCols","row","col","status","posToArrIndex","calculateBombNumberForEachTile","callback","xDelta","yDelta","numEdgesOfPos","left","right","top","bottom","total","trunc","updateTileStatus","openNonBombNeighbors","curr","flaggedState","isFlagged","numFlagged","tileToOpen","neighborsWithFlags","indexWithinBounds","isOpened","has","add","size","win","min","decrementUsed","lose","initialState","gameProps","isPaused","game","timeElapsed","isSet","pages","reducers","data","state","action","forEach","page","gameMode","update","shouldRerender","newMode","loss","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","LogoContainer","styled","div","LogoText","p","connect","dispatch","openMainMenu","onClick","style","fontFamily","fontSize","margin","cursor","getTimeElapsed","getBoard","getGame","getIsSet","getGameMode","getGameDifficulty","isPageSelected","previousGameExists","getWin","getLoss","changed","ownProps","getTile","MainMenuContainer","props","inSetupMode","StyledMainMenuButton","continuePreviousGame","inMainMenu","setupNewGame","continueGame","display","marginTop","className","GameSetupContainer","localRemoveCachedBoard","newDifficulty","switchToGame","Object","keys","s","msg","charAt","toUpperCase","slice","toLowerCase","id","name","value","selectedValue","gameDifficultySelector","document","querySelectorAll","difficultyOption","checked","startNewGame","TimerWrapper","firstPause","inGame","inGameFirstClick","updateTimer","setTimeout","InGameMenuWrapper","remainingBombs","mainMenu","toggledPause","icon","faHome","faFlag","faMousePointer","faPlay","faPause","faRedo","HINT_TILES","BombImage","url","OpenedImage","FlaggedImage","UnopenedImage","timeImageFactory","createImage","TileImage","TileWrapper","click","position","zIndex","opacity","first","GameWrapper","performInitialSetup","newGame","firstClick","updateBoard","removeCachedBoard","setDifficulty","window","addEventListener","event","isClicked","openNeighbors","unopenedTileClick","flagTile","flagClick","initialTileClick","Win","Loss","title","src","width","height","frameBorder","allowFullScreen","textAlign","Pages","pageLoadedSetup","onLoad","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.c8a1c2f5.chunk.js","sourcesContent":["export const PAGE_LOADED_SETUP = 'PAGE_LOADED_SETUP';\r\nexport const pageLoadedSetup = () => ({\r\n    type: PAGE_LOADED_SETUP,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const initializeBoard = (game) => ({\r\n    type: INITIALIZE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const updateBoard = () => ({\r\n    type: UPDATE_BOARD,\r\n    payload: {},\r\n});\r\n\r\n\r\nexport const REMOVE_CACHED_BOARD = 'REMOVE_CACHED_BOARD';\r\nexport const removeCachedBoard = () => ({\r\n    type: REMOVE_CACHED_BOARD,\r\n    payload: {},\r\n});\r\n\r\nexport const TOGGLE_PAUSE_GAME = 'TOGGLE_PAUSE_GAME';\r\nexport const togglePauseGame = () => ({\r\n    type: TOGGLE_PAUSE_GAME,\r\n    payload: {},\r\n});\r\n\r\nexport const END_GAME = 'END_GAME';\r\nexport const endGame = (didWin) => ({\r\n    type: END_GAME,\r\n    payload: {didWin},\r\n});\r\n\r\n\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const updateTimer = (timeElapsed) => ({\r\n    type: UPDATE_TIMER,\r\n    payload: { timeElapsed },\r\n});\r\n\r\nexport const TOGGLE_GAME_MODE = 'TOGGLE_GAME_MODE';\r\nexport const toggleGameMode = (now) => ({\r\n    type: TOGGLE_GAME_MODE,\r\n    payload: { now },\r\n});\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const startGame = (difficulty) => ({\r\n    type: START_GAME,\r\n    payload: { difficulty },\r\n});\r\n\r\nexport const SWITCH_PAGES = 'SWITCH_PAGES';\r\nexport const switchPages = (PAGE) => ({\r\n    type: SWITCH_PAGES,\r\n    payload: { PAGE },\r\n});\r\n\r\n","\r\nexport const EASY = {\r\n    rows: 9,\r\n    cols: 9,\r\n    numBombs: 10,\r\n    key: \"EASY\"\r\n};\r\n\r\nexport const MEDIUM = {\r\n    rows: 16,\r\n    cols: 16,\r\n    numBombs: 40,\r\n    key: \"MEDIUM\"\r\n};\r\n\r\nexport const HARD = {\r\n    rows: 30,\r\n    cols: 16,\r\n    numBombs: 99,\r\n    key: \"HARD\"\r\n};\r\n\r\nexport const DIFFICULTIES = {\r\n    \"EASY\": EASY,\r\n    \"MEDIUM\": MEDIUM,\r\n    \"HARD\": HARD,\r\n}\r\n\r\n// Page States\r\nexport const MAIN_MENU = \"MAIN_MENU\";\r\nexport const SETUP_NEW_GAME = \"SETUP_NEW_GAME\";\r\nexport const IN_GAME_FIRST_CLICK = \"IN_GAME_FIRST_CLICK\";\r\nexport const IN_GAME = \"IN_GAME\";\r\n\r\nexport const ALL_PAGES = [MAIN_MENU, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK, IN_GAME];","/* eslint-disable complexity */\r\nimport { shuffle } from '../utils';\r\n\r\nconst bombTile = {\r\n    type: 'bomb',\r\n};\r\n\r\nconst safeTile = {\r\n    type: 'safe',\r\n};\r\n\r\nfunction isBomb(tile) {\r\n    return tile.type === 'bomb';\r\n}\r\n\r\nclass MinesweeperGame {\r\n    constructor(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = numBombs;\r\n        this.nonBombs = (rows * cols) - numBombs;\r\n        this.remaining = (rows * cols) - numBombs;\r\n        this.opened = new Set();\r\n        this.gameOver = false;\r\n        this.didWin = false;\r\n        if (this.bombs === 0) {\r\n            this.board = genNonBombs(rows * cols);\r\n        } else {\r\n            this.board = this.createBoard(gameDifficulty, initialClick);\r\n            this.clickTile(this.board[initialClick]);\r\n        }\r\n    }\r\n\r\n    createBoard(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n\r\n        const pos = this.indexToPos(initialClick, cols);\r\n        const totalTiles = rows * cols;\r\n        const bombs = genBombs(numBombs);\r\n\r\n        let numSafe = 9;\r\n\r\n        if (this.isCorner(pos, rows, cols)) {\r\n            numSafe = 4;\r\n        } else if (this.isOnAnEdge(pos, rows, cols)) {\r\n            numSafe = 6;\r\n        }\r\n\r\n        const randomSafe = genNonBombs(totalTiles - numSafe - numBombs, safeTile);\r\n        const randomizeBoard = shuffle(bombs.concat(randomSafe));\r\n\r\n        const finishedBoard = [...Array(rows)].map(() => Array(cols).fill(0));\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            finishedBoard[coords.y][coords.x] = safeTile;\r\n        });\r\n\r\n        let index = 0;\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!finishedBoard[row][col]) {\r\n                finishedBoard[row][col] = randomizeBoard[index];\r\n                index++;\r\n            }\r\n\r\n            finishedBoard[row][col] = {\r\n                ...finishedBoard[row][col],\r\n                status: 0,\r\n                index: this.posToArrIndex({ x: col, y: row }, cols),\r\n                numBombs: 0,\r\n            };\r\n        });\r\n\r\n\r\n        this.calculateBombNumberForEachTile(finishedBoard, rows, cols);\r\n\r\n        return [].concat(...finishedBoard);\r\n    }\r\n\r\n    iterateOverNeighbors(pos, callback) {\r\n        for (let xDelta = -1; xDelta <= 1; xDelta++) {\r\n            for (let yDelta = -1; yDelta <= 1; yDelta++) {\r\n                const coords = { x: pos.x + xDelta, y: pos.y + yDelta };\r\n                if (coords.x < 0 || coords.x >= this.cols) {\r\n                    continue;\r\n                }\r\n                if (coords.y < 0 || coords.y >= this.rows) {\r\n                    continue;\r\n                }\r\n                callback(coords);\r\n            }\r\n        }\r\n    }\r\n\r\n    iterateOverRowsCols(callback) {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.cols; col++) {\r\n                callback(row, col);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateBombNumberForEachTile(finishedBoard, rows, cols) {\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!isBomb(finishedBoard[row][col])) {\r\n                return;\r\n            }\r\n            const pos = { x: col, y: row };\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                finishedBoard[coords.y][coords.x].numBombs += 1;\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    posToArrIndex(pos, cols) {\r\n        return pos.y * cols + pos.x;\r\n    }\r\n\r\n    isCorner(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) === 2;\r\n    }\r\n\r\n    numEdgesOfPos(pos, rows, cols) {\r\n        const left = pos.y === 0;\r\n        const right = pos.y === cols - 1;\r\n        const top = pos.x === 0;\r\n        const bottom = pos.x === rows - 1;\r\n\r\n        let total = 0;\r\n        if (left || right) total++;\r\n        if (top || bottom) total++;\r\n\r\n        return total;\r\n    }\r\n\r\n    isOnAnEdge(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) > 0;\r\n    }\r\n\r\n\r\n\r\n    indexToPos(index, cols) {\r\n        const y = Math.trunc(index / cols);\r\n        const x = index - y * cols;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    clickTile(tile) {\r\n        this.updateTileStatus(tile.index);\r\n        this.openNonBombNeighbors(tile);\r\n    }\r\n\r\n    flagTile(tile) {\r\n        const curr = this.board[tile.index];\r\n        const flaggedState = curr.isFlagged;\r\n        curr.isFlagged = !flaggedState;\r\n        this.updateTileStatus(tile.index);\r\n    }\r\n\r\n    indexWithinBounds(index) {\r\n        return index >= 0 && index < this.rows * this.cols;\r\n    }\r\n\r\n    isFlagged(index) {\r\n        return this.board[index].isFlagged;\r\n    }\r\n\r\n    neighborsWithFlags(tile) {\r\n        let numFlagged = 0;\r\n        this.iterateOverNeighbors(this.indexToPos(tile.index, this.cols), (coords) => {\r\n            const index = this.posToArrIndex(coords, this.cols);\r\n            if (this.isFlagged(index)) {\r\n                numFlagged++;\r\n            }\r\n        });\r\n\r\n        return numFlagged;\r\n    }\r\n\r\n    openNeighbors(tileToOpen) {\r\n        const numFlagged = this.neighborsWithFlags(tileToOpen);\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n\r\n        if (numFlagged === tileToOpen.numBombs) {\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                const index = this.posToArrIndex(coords, this.cols);\r\n\r\n                if (this.indexWithinBounds(index)) {\r\n                    const tile = this.board[index];\r\n                    if (this.isFlagged(index)) {\r\n                        return;\r\n                    }\r\n                    if (tile.isOpened) {\r\n                        return;\r\n                    }\r\n                    this.clickTile(tile);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    decrementUsed(index) {\r\n        if (!this.opened.has(index)) {\r\n            this.remaining--;\r\n        }\r\n        this.opened.add(index);\r\n        if (this.opened.size === this.nonBombs) {\r\n            this.win();\r\n            return;\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        return this.gameOver;\r\n    }\r\n\r\n    win() {\r\n        this.gameOver = true;\r\n        this.didWin = true;\r\n    }\r\n\r\n    lose() {\r\n        this.gameOver = true;\r\n    }\r\n\r\n    updateTileStatus(index) {\r\n        var min = 1;\r\n        if (this.board[index].status) min = this.board[index].status;\r\n        this.board[index].status = min + 1;\r\n    }\r\n\r\n    openNonBombNeighbors(tileToOpen) {\r\n        this.updateTileStatus(tileToOpen.index);\r\n\r\n        if (tileToOpen.type === 'bomb') {\r\n            this.lose();\r\n            return;\r\n        }\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n        if (tileToOpen.isOpened) {\r\n            return;\r\n        }\r\n        this.board[tileToOpen.index].isOpened = true;\r\n    \r\n\r\n        this.decrementUsed(tileToOpen.index);\r\n\r\n        if (tileToOpen.numBombs && tileToOpen.numBombs > 0) {\r\n            return;\r\n        }\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            const tileToOpen = this.board[this.posToArrIndex(coords, this.cols)];\r\n            if (isBomb(tileToOpen)) {\r\n                return;\r\n            }\r\n\r\n            this.openNonBombNeighbors(tileToOpen);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction genNonBombs(numTiles, includeIndex, toInsert) {\r\n    const tiles = [];\r\n\r\n\r\n    for (let count = 0; count < numTiles; count++) {\r\n        tiles.push({\r\n            ...toInsert,\r\n            index: count,\r\n        });\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\nfunction genBombs(numBombs) {\r\n    const bombs = [];\r\n\r\n    for (let count = 0; count < numBombs; count++) {\r\n        bombs.push(bombTile);\r\n    }\r\n\r\n    return bombs;\r\n}\r\n\r\nexport default MinesweeperGame;","export function shuffle(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function capitalize(s) {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n}","import {\r\n    INITIALIZE_BOARD,\r\n    REMOVE_CACHED_BOARD,\r\n    UPDATE_BOARD,\r\n    UPDATE_TIMER,\r\n    TOGGLE_GAME_MODE,\r\n    START_GAME,\r\n    PAGE_LOADED_SETUP,\r\n    SWITCH_PAGES,\r\n    TOGGLE_PAUSE_GAME,\r\n    END_GAME\r\n} from './actions';\r\nimport { EASY, MAIN_MENU, ALL_PAGES } from './Constants';\r\nimport MinesweeperGame from './Minesweeper/Minesweeper';\r\n\r\n\r\n\r\nconst initialState = {\r\n    gameProps: {\r\n        difficulty: EASY,\r\n        isPaused: false,\r\n        game: {\r\n            board: []\r\n        },\r\n        timeElapsed: 0,\r\n        isSet: false,\r\n    },\r\n    pages: {}\r\n};\r\n\r\nexport const data = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case PAGE_LOADED_SETUP: {\r\n            ALL_PAGES.forEach(page => {\r\n                state.pages[page] = false;\r\n            })\r\n            state.pages[MAIN_MENU] = true;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            }\r\n        }\r\n\r\n        case INITIALIZE_BOARD: {\r\n            const { game } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    game: game,\r\n                    isSet: true,\r\n                    update: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                    isPaused: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        case UPDATE_BOARD: {\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    shouldRerender: state.gameProps.shouldRerender + 1,\r\n                }\r\n            };\r\n        }\r\n\r\n        case UPDATE_TIMER: {\r\n            const { timeElapsed } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    timeElapsed: timeElapsed,\r\n                }\r\n            };\r\n        }\r\n\r\n        case TOGGLE_PAUSE_GAME: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    isPaused: !state.gameProps.isPaused,\r\n                }\r\n            }\r\n        }\r\n\r\n        case REMOVE_CACHED_BOARD: {\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    isSet: false,\r\n                    game: {\r\n                        board: [],\r\n                    },\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                },\r\n            };\r\n        }\r\n\r\n        case TOGGLE_GAME_MODE: {\r\n            const newMode = state.gameProps.gameMode === 'clicking' ? 'flagging' : 'clicking';\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    gameMode: newMode,\r\n                }\r\n            };\r\n        }\r\n\r\n        case START_GAME: {\r\n            const { difficulty } = payload;\r\n\r\n            const game = new MinesweeperGame({\r\n                ...difficulty,\r\n                numBombs: 0,\r\n            }, null);\r\n\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    difficulty: difficulty,\r\n                    game: game,\r\n                    isPaused: false,\r\n                    timeElapsed: 0,\r\n                    shouldRerender: 0,\r\n                    gameMode: 'clicking',\r\n                }\r\n            };\r\n        }\r\n\r\n        case SWITCH_PAGES: {\r\n            const { PAGE } = payload;\r\n\r\n            ALL_PAGES.forEach((page) => {\r\n                state[\"pages\"][page] = page === PAGE;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case END_GAME: {\r\n            const { didWin } = payload;\r\n            return {\r\n                ...state,\r\n                gameProps: {\r\n                    ...state.gameProps,\r\n                    win: didWin,\r\n                    loss: !didWin,\r\n                }\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { data } from './reducers';\r\n\r\nconst reducers = {\r\n    data,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () =>\r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport './Shared.css';\r\nimport { switchPages } from './actions';\r\nimport { MAIN_MENU } from './Constants';\r\n\r\nconst LogoContainer = styled.div`\r\n    width:100%;\r\n    background:lightgray;\r\n    text-align:center;\r\n    font-style: italic;\r\n`;\r\n\r\nconst LogoText = styled.p`\r\n`;\r\n\r\nconst Logo = ({ openMainMenu }) => (\r\n    <LogoContainer >\r\n        <LogoText onClick={openMainMenu} style={{ fontFamily: 'Pacifico', fontSize: 'xxx-large', margin: '0px 0px 10px', cursor: 'pointer' }}>Lorne's Minesweeper</LogoText>\r\n    </LogoContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    openMainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Logo);","export const getTimeElapsed = (state) => {\r\n    return state.data.gameProps.timeElapsed;\r\n}\r\n\r\nexport const isPaused = (state) => {\r\n    return state.data.gameProps.isPaused;\r\n}\r\n\r\nexport const getBoard = (state) => {\r\n    return state.data.gameProps.game.board;\r\n};\r\n\r\nexport const plsRerender = (state) => {\r\n    return state.data.gameProps.shouldRerender;\r\n};\r\n\r\nexport const getGame = (state) => {\r\n    return state.data.gameProps.game;\r\n};\r\n\r\nexport const getIsSet = (state) => {\r\n    return state.data.gameProps.isSet;\r\n};\r\n\r\nexport const getStartTime = (state) => {\r\n    return state.data.gameProps.startTime;\r\n};\r\n\r\nexport const getCurrentTime = (state) => {\r\n    return state.data.gameProps.now;\r\n};\r\n\r\nexport const getGameMode = (state) => {\r\n    return state.data.gameProps.gameMode;\r\n};\r\n\r\nexport const getGameDifficulty = (state) => {\r\n    return state.data.gameProps.difficulty;\r\n};\r\n\r\nexport const isPageSelected = (state, page) => {\r\n    return state.data.pages[page];\r\n}\r\n\r\nexport const previousGameExists = (state) => {\r\n    return state.data.gameProps.game.board.length > 0;\r\n}\r\n\r\nexport const getRemainingBombs = (state) => {\r\n    return 0;\r\n}\r\nexport const getWin = (state) => {\r\n    return state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const getLoss = (state) => {\r\n    return !state.data.gameProps.game.didWin && state.data.gameProps.game.gameOver;\r\n}\r\nexport const gameOver = (state) => {\r\n    return state.data.gameProps.game.gameOver;\r\n}\r\n\r\nexport const changed = (state, ownProps) => {\r\n    return state.data.gameProps.game.board[ownProps.index].status;\r\n}\r\n\r\nexport const getTile = (state, ownProps) => {\r\n    return  state.data.gameProps.game.board[ownProps.index];\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    isPageSelected,\r\n    previousGameExists,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { switchPages } from '../../actions';\r\nimport { MAIN_MENU, IN_GAME, SETUP_NEW_GAME } from '../../Constants';\r\nimport './Buttons.css'\r\n\r\nconst MainMenuContainer = styled.div`\r\n    display:${props => !!props.inSetupMode ? \"none\" : \"inline-grid\"};\r\n`;\r\n\r\nconst StyledMainMenuButton = styled.div`\r\n`;\r\n\r\n\r\nconst MainMenu = ({ continuePreviousGame, inSetupMode, setupNewGame, inMainMenu, continueGame }) => {\r\n\r\n    return <div style={{ display: inMainMenu ? \"\" : \"none\", marginTop: \"20px\" }}>\r\n\r\n        <MainMenuContainer inSetupMode={inSetupMode}>\r\n            <StyledMainMenuButton className=\"button\" style={{ display: `${continuePreviousGame ? \"\" : \"none\"}` }} onClick={() => {\r\n                continueGame();\r\n            }}><span>Continue Game </span></StyledMainMenuButton>\r\n\r\n            <StyledMainMenuButton className=\"button\" onClick={() => {\r\n                setupNewGame();\r\n\r\n            }}><span>New Game </span></StyledMainMenuButton>\r\n\r\n            <StyledMainMenuButton className=\"button\" ><span>Settings</span> </StyledMainMenuButton>\r\n            <StyledMainMenuButton className=\"button\" ><span>How To Play </span> </StyledMainMenuButton>\r\n        </MainMenuContainer>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    continuePreviousGame: previousGameExists(state) && !gameOver(state),\r\n    inMainMenu: isPageSelected(state, MAIN_MENU),\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setupNewGame: () => dispatch(switchPages(SETUP_NEW_GAME)),\r\n    continueGame: () => dispatch(switchPages(IN_GAME)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { EASY, MEDIUM, HARD, DIFFICULTIES, SETUP_NEW_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport { removeCachedBoard, startGame, switchPages } from '../../actions';\r\nimport {\r\n    isPageSelected,\r\n} from '../../selectors';\r\n\r\nimport './GameSetup.css'\r\n\r\nimport { capitalize } from '../../utils'\r\n\r\nconst GameSetupContainer = styled.div`\r\n    display: ${props => props.inSetupMode ? \"inline-grid\" : \"none\"};\r\n`;\r\n\r\n\r\nconst GameSetup = ({ localRemoveCachedBoard, startGame, inSetupMode, switchToGame }) => {\r\n\r\n\r\n    const startNewGame = () => {\r\n\r\n        const gameDifficultySelector = document.querySelectorAll('input[name=\\'gameDifficulty\\']');\r\n        let selectedValue;\r\n        for (const difficultyOption of gameDifficultySelector) {\r\n            if (difficultyOption.checked) {\r\n                selectedValue = difficultyOption.value;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let gameDifficulty = null;\r\n\r\n        if (selectedValue === EASY.key) {\r\n            gameDifficulty = EASY;\r\n        }\r\n        else if (selectedValue === MEDIUM.key) {\r\n            gameDifficulty = MEDIUM;\r\n        } else if (selectedValue === HARD.key) {\r\n            gameDifficulty = HARD;\r\n        }\r\n\r\n        if (gameDifficulty) {\r\n            localRemoveCachedBoard();\r\n            startGame(gameDifficulty);\r\n            switchToGame();\r\n        }\r\n    }\r\n\r\n    return <GameSetupContainer inSetupMode={inSetupMode} style={{ marginTop: 20 }}>\r\n        {\r\n            Object.keys(DIFFICULTIES).map((key) => {\r\n                const difficulty = DIFFICULTIES[key];\r\n                const msg = `${capitalize(key)} (${difficulty.rows} x ${difficulty.cols}, ${difficulty.numBombs} mines)`\r\n                return <label key={key} className=\"container\">{msg}\r\n                    <input type=\"radio\" id={key} name=\"gameDifficulty\" value={key} />\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n            })\r\n        }\r\n\r\n        <div id=\"testbutton\" onClick={() => {\r\n            startNewGame();\r\n        }}></div>\r\n\r\n    </GameSetupContainer>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inSetupMode: isPageSelected(state, SETUP_NEW_GAME),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    startGame: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n    switchToGame: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameSetup);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    isPaused,\r\n    getTimeElapsed,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\n\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nimport { updateTimer } from \"../../actions\";\r\n\r\nconst TimerWrapper = styled.div``;\r\n\r\nlet firstPause = false;\r\n\r\nconst Timer = ({ timeElapsed, isPaused, updateTimer, inGame, inGameFirstClick, gameOver }) => {\r\n\r\nif (gameOver) return <div>{timeElapsed}</div>;\r\n\r\n    let incrementTimer = () => {\r\n        setTimeout(() => {\r\n            if (inGame && !isPaused && !firstPause)\r\n                updateTimer(timeElapsed + 1);\r\n        }, 1000)\r\n    };\r\n\r\n    if (inGame && !isPaused)\r\n        incrementTimer();\r\n    else if (inGameFirstClick)\r\n        updateTimer(0);\r\n\r\n    if (!isPaused) firstPause = false;\r\n    else if (!firstPause && isPaused) {\r\n        firstPause = true;\r\n    }\r\n\r\n    return <TimerWrapper>{timeElapsed}</TimerWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeElapsed: getTimeElapsed(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    inGameFirstClick: isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateTimer: (timeElapsed) => dispatch(updateTimer(timeElapsed)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { faMousePointer, faFlag, faRedo, faHome, faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    getGame,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    getRemainingBombs,\r\n    isPaused,\r\n    isPageSelected,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport {\r\n    startGame,\r\n    removeCachedBoard,\r\n    toggleGameMode,\r\n    switchPages,\r\n    togglePauseGame,\r\n\r\n} from '../../actions'\r\nimport Timer from './Timer';\r\nimport { MAIN_MENU, IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\n\r\nconst InGameMenuWrapper = styled.div`\r\n    display:flex;\r\n    margin:15px;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst InGameMenu = ({\r\n    gameMode, isPaused, gameDifficulty, toggleGameMode, inGameFirstClick, localRemoveCachedBoard, startGame, mainMenu, remainingBombs, toggledPause, inGame, gameOver\r\n}) => {\r\n\r\n    return <InGameMenuWrapper>\r\n        <FontAwesomeIcon size='2x' icon={faHome} onClick={() => { mainMenu() }} />\r\n        <Timer />\r\n        <div>{remainingBombs}</div>\r\n\r\n        <FontAwesomeIcon\r\n            size='2x'\r\n            style={{ display: `${!gameOver ? \"\" : \"none\"}` }}\r\n            icon={gameMode === 'flagging' ? faFlag : faMousePointer}\r\n            onClick={\r\n                () => {\r\n                    toggleGameMode();\r\n                }\r\n            }\r\n        />\r\n\r\n        <FontAwesomeIcon style={{ display: `${inGame && !gameOver ? \"\" : \"none\"}` }} size='2x' icon={isPaused ? faPlay : faPause} onClick={toggledPause} />\r\n\r\n        <FontAwesomeIcon size='2x' icon={faRedo} onClick={() => {\r\n            localRemoveCachedBoard();\r\n            inGameFirstClick();\r\n            startGame(gameDifficulty);\r\n        }} />\r\n\r\n    </InGameMenuWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    game: getGame(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    remainingBombs: getRemainingBombs(state),\r\n    isPaused: isPaused(state),\r\n    inGame: isPageSelected(state, IN_GAME),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    mainMenu: () => dispatch(switchPages(MAIN_MENU)),\r\n    startGame: (gameDifficulty) => dispatch(startGame(gameDifficulty)),\r\n    inGameFirstClick: () => dispatch(switchPages(IN_GAME_FIRST_CLICK)),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggledPause: () => dispatch(togglePauseGame()),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InGameMenu);","/* eslint-disable max-len */\r\nexport const BOMB_TILE = 'https://apprecs.org/ios/images/app-icons/256/e7/451931111.jpg';\r\nexport const HINT_TILES = [\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Minesweeper_0.svg/2000px-Minesweeper_0.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Minesweeper_1.svg/2000px-Minesweeper_1.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Minesweeper_2.svg/2000px-Minesweeper_2.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Minesweeper_3.svg/2000px-Minesweeper_3.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Minesweeper_4.svg/2000px-Minesweeper_4.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Minesweeper_5.svg/2000px-Minesweeper_5.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Minesweeper_6.svg/2000px-Minesweeper_6.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Minesweeper_7.svg/2000px-Minesweeper_7.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Minesweeper_8.svg/2000px-Minesweeper_8.svg.png',\r\n];\r\n\r\nexport const FLAG_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Minesweeper_flag.svg/2000px-Minesweeper_flag.svg.png';\r\nexport const UNOPENED_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Minesweeper_unopened_square.svg/1024px-Minesweeper_unopened_square.svg.png';","/* eslint-disable complexity */\r\n/* eslint-disable func-style */\r\n\r\nimport styled from 'styled-components';\r\nimport { BOMB_TILE, HINT_TILES, FLAG_TILE, UNOPENED_TILE } from './ImageUrls';\r\n\r\nconst BombImage = function () {\r\n    this.url = BOMB_TILE;\r\n};\r\n\r\nconst OpenedImage = function (numBombs) {\r\n    this.url = HINT_TILES[numBombs];\r\n};\r\n\r\nconst FlaggedImage = function () {\r\n    this.url = FLAG_TILE;\r\n};\r\n\r\nconst UnopenedImage = function () {\r\n    this.url = UNOPENED_TILE;\r\n};\r\n\r\nfunction TileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (tile.isOpened && tile.type === 'bomb') {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nconst timeImageFactory = new TileImageFactory();\r\n\r\nconst TileImage = styled.div`\r\ncontent: url(${(props) => {\r\n        return timeImageFactory.createImage(props.tile);\r\n    }});\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nexport default TileImage;","/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TileImage from './TileImageFactory';\r\nimport { connect } from 'react-redux';\r\nimport { getTile, changed } from '../selectors';\r\n\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\n// let tileIndex = -1;\r\n\r\nconst Tile = ({ tile, gameMode, click, index, changed }) => {\r\n\r\n    return <TileWrapper\r\n        onClick={() => {\r\n            click(tile);\r\n        }}>\r\n\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${gameMode === 'flagging' && !tile.isOpened && !tile.isFlagged ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.3'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    tile: getTile(state, ownProps),\r\n    changed: changed(state, ownProps),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Tile);\r\n\r\n// export default Tile;","/* eslint-disable react/prop-types */\r\n\r\nimport React from 'react';\r\nimport Tile from '../../Minesweeper/Tile';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    getBoard,\r\n    getIsSet,\r\n    getGame,\r\n    plsRerender,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n    isPaused,\r\n    gameOver,\r\n} from '../../selectors';\r\nimport { initializeBoard, updateBoard, removeCachedBoard, toggleGameMode, startGame, switchPages, } from '../../actions';\r\n\r\nimport MinesweeperGame from '../..//Minesweeper/Minesweeper';\r\nimport { IN_GAME } from '../../Constants';\r\n\r\nlet emptyBoard = null;\r\n\r\nlet first = true;\r\n\r\nconst GameWrapper = styled.div`\r\n    display: inline-grid;\r\n    visibility: ${props => props.isPaused ? \"hidden\" : \"\"};\r\n    grid-template-columns: repeat(${props => props.gameDifficulty ? props.gameDifficulty.cols : 0},1fr);\r\n`;\r\n\r\nconst Game = ({\r\n    // state\r\n    game, isSet, gameMode, gameDifficulty, isPaused, gameOver,\r\n    // actions\r\n    performInitialSetup, updateBoard, firstClick, toggleGameMode,\r\n}) => {\r\n\r\n    if (first && isSet) {\r\n        window.addEventListener('keydown', (event) => {\r\n            if (event.key === 'F' || event.key === 'f') {\r\n                if (gameOver) return;\r\n                toggleGameMode();\r\n            }\r\n        }, false);\r\n        first = false;\r\n    }\r\n\r\n    const initialTileClick = (tile) => {\r\n        const newGame = new MinesweeperGame(gameDifficulty, tile.index);\r\n        performInitialSetup(newGame);\r\n        firstClick();\r\n    };\r\n\r\n    const bombClick = () => {\r\n        game.lose();\r\n    };\r\n\r\n    const unopenedTileClick = (tile) => {\r\n        game.clickTile(tile);\r\n        updateBoard();\r\n    }\r\n\r\n    const flagClick = (tile) => {\r\n        game.flagTile(tile);\r\n        updateBoard();\r\n    };\r\n\r\n    const openNeighbors = (tile) => {\r\n        game.openNeighbors(tile);\r\n        updateBoard();\r\n    };\r\n\r\n    function isClicked(tile) {\r\n        if (tile && tile.isOpened) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return <GameWrapper isPaused={isPaused} gameDifficulty={gameDifficulty}>\r\n        {\r\n            game.board.length === 0 ? <div></div> :\r\n                game.board.map((tile) => {\r\n                    return <Tile\r\n                        key={tile.index}\r\n                        index={tile.index}\r\n                        gameMode={gameMode}\r\n\r\n                        click={\r\n                            (tile) => {\r\n                                if (gameOver) return;\r\n\r\n                                if (!isSet) {\r\n                                    initialTileClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (isClicked(tile)) {\r\n                                    openNeighbors(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (gameMode === 'flagging') {\r\n                                    flagClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (tile.isFlagged) {\r\n                                    return;\r\n                                }\r\n                                if (tile.type === 'bomb') {\r\n                                    bombClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                unopenedTileClick(tile);\r\n                            }\r\n                        }\r\n                    />;\r\n                })\r\n        }\r\n    </GameWrapper>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    // rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n    isPaused: isPaused(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    performInitialSetup: (newGame) => dispatch(initializeBoard(newGame)),\r\n    firstClick: () => dispatch(switchPages(IN_GAME)),\r\n    updateBoard: () => dispatch(updateBoard()),\r\n    removeCachedBoard: () => dispatch(removeCachedBoard()),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(startGame(newDifficulty)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport InGameMenu from './InGameMenu';\r\nimport Game from './Game';\r\nimport { isPageSelected, getWin, getLoss, gameOver } from '../../selectors';\r\nimport { IN_GAME, IN_GAME_FIRST_CLICK } from '../../Constants';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Win = styled.div`\r\n    display:${props => props.win ? \"\" : \"none\"};\r\n`;\r\n\r\nconst Loss = styled.div`\r\n    display:${props => props.loss ? \"\" : \"none\"};\r\n`;\r\n\r\nconst GameDisplay = ({\r\n    inGame, win, loss\r\n}) => {\r\n\r\n\r\n\r\n    return <div style={{ display: inGame ? \"inline-block\" : \"none\" }} >\r\n        <InGameMenu />\r\n        <Win win={win}>\r\n            <iframe title=\"winGIF\" src=\"https://giphy.com/embed/peAFQfg7Ol6IE\" width=\"480\" height=\"455\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You found all the bombs!! (You win)</p>\r\n        </Win>\r\n        <Loss loss={loss}>\r\n            <iframe title=\"lossGIF\" src=\"https://giphy.com/embed/oe33xf3B50fsc\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n            <p style={{ textAlign: \"center\" }}>You clicked a bomb!</p>\r\n        </Loss>\r\n        <Game />\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inGame: isPageSelected(state, IN_GAME) || isPageSelected(state, IN_GAME_FIRST_CLICK),\r\n    win: getWin(state),\r\n    loss: getLoss(state),\r\n    gameOver: gameOver(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameDisplay);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { pageLoadedSetup } from './actions'\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport Logo from './Logo';\r\nimport MainMenu from './Pages/MainMenu/MainMenu';\r\nimport GameSetup from './Pages/GameSetup/GameSetup';\r\nimport GameDisplay from './Pages/InGame/GameDisplay';\r\n\r\nconst Pages = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst App = ({ pageLoadedSetup }) => {\r\n    return <div className=\"App-Wrapper unselectable\" onLoad={pageLoadedSetup}>\r\n        <div className=\"App\">\r\n            <Logo />\r\n            <Pages>\r\n                <MainMenu />\r\n                <GameSetup />\r\n                <GameDisplay />\r\n            </Pages>\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pageLoadedSetup: () => dispatch(pageLoadedSetup()),\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport App from './App.js';\r\n\r\n\r\nconst store = configureStore();\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate\r\n            loading={<div>Loading...</div>}\r\n            persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));"],"sourceRoot":""}