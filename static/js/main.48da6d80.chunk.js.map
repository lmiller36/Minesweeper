{"version":3,"sources":["Timer.js","StatusBar.js","actions.js","App.js","selectors.js","Minesweeper/ImageUrls.js","Minesweeper/TileImageFactory.js","Minesweeper/Tile.js","Minesweeper/Minesweeper.js","Minesweeper/utils.js","Game.js","GameDisplay.js","reducers.js","store.js","index.js"],"names":["TimerWrapper","styled","div","connect","state","startTime","getStartTime","now","getCurrentTime","actualStartTime","timeElapsed","seconds","isNaN","Math","round","ModeWrapper","RemainingBombs","StatusBarWrapper","EasyDifficulty","rows","cols","numBombs","MediumDifficulty","HardDifficulty","board","getBoard","game","getGame","gameMode","getGameMode","props","remaining","size","icon","faFlag","faMousePointer","onClick","toggleGameMode","className","curr","document","getElementById","style","display","faCog","id","faTimes","position","right","type","name","value","htmlFor","faRedo","console","log","localRemoveCachedBoard","selectedValue","gameDifficultySelector","querySelectorAll","difficultyOption","checked","gameDifficulty","setGameDifficulty","INITIALIZE_BOARD","initializeBoard","payload","UPDATE_BOARD","updateBoard","REMOVE_CACHED_BOARD","removeCachedBoard","INITILIZE_TIMER","initializeTimer","UPDATE_TIMER","updateTimer","TOGGLE_GAME_MODE","SET_GAME_DIFFICULTY","difficulty","hot","module","data","plsRerender","shouldRerender","getIsSet","isSet","getGameDifficulty","HINT_TILES","BombImage","this","url","OpenedImage","FlaggedImage","UnopenedImage","timeImageFactory","createImage","tile","isOpened","isFlagged","TileImage","TileWrapper","Tile","click","zIndex","left","top","opacity","bombTile","safeTile","isBomb","genNonBombs","numTiles","includeIndex","toInsert","tiles","count","push","index","MinesweeperGame","initialClick","bombs","nonBombs","opened","Set","createBoard","clickTile","pos","indexToPos","totalTiles","genBombs","numSafe","isCorner","isOnAnEdge","randomSafe","randomizeBoard","arr","i","length","j","floor","random","shuffle","concat","finishedBoard","Array","map","fill","iterateOverNeighbors","coords","y","x","iterateOverRowsCols","row","col","posToArrIndex","calculateBombNumberForEachTile","callback","xDelta","yDelta","numEdgesOfPos","bottom","total","trunc","openNonBombNeighbors","flaggedState","numFlagged","tileToOpen","neighborsWithFlags","indexWithinBounds","has","add","alert","decrementUsed","stop","emptyBoard","first","rerender","dispatch","performInitialSetup","newGame","setStartTime","interval","setDifficulty","newDifficulty","GameWrapper","window","addEventListener","event","key","visibleBoard","isClicked","openNeighbors","unopenedTileClick","flagTile","flagClick","timerInterval","setInterval","Date","clearInterval","initialTileClick","StatusBar","initialState","reducers","action","update","newMode","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","App"],"mappings":"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","file":"static/js/main.48da6d80.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getStartTime,\r\n    getCurrentTime,\r\n} from './selectors';\r\n\r\nconst TimerWrapper = styled.div``;\r\n\r\nconst Timer = (startTime) => {\r\n    const actualStartTime = startTime.startTime;\r\n    const now = startTime.now;\r\n    const milliseconds = 1000;\r\n    const timeElapsed = now - actualStartTime;\r\n\r\n    let seconds = 0;\r\n\r\n    if (!isNaN(seconds)) {\r\n        seconds = Math.round(timeElapsed / milliseconds);\r\n    }\r\n\r\n    return <TimerWrapper>{seconds}</TimerWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    startTime: getStartTime(state),\r\n    now: getCurrentTime(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Timer);","/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { faMousePointer, faFlag, faCog, faTimes, faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    getBoard,\r\n    getGame,\r\n    getGameMode,\r\n\r\n} from './selectors';\r\nimport Timer from './Timer';\r\n\r\nconst ModeWrapper = styled.div`\r\n`;\r\n\r\nconst RemainingBombs = styled.div`\r\n`;\r\n\r\nconst StatusBarWrapper = styled.div`\r\n    display:flex;\r\n    margin:15px;\r\n    justify-content: space-around;\r\n`;\r\n\r\nexport const EasyDifficulty = {\r\n    rows: 9,\r\n    cols: 9,\r\n    numBombs: 10,\r\n};\r\n\r\nexport const MediumDifficulty = {\r\n    rows: 16,\r\n    cols: 16,\r\n    numBombs: 40,\r\n};\r\n\r\nexport const HardDifficulty = {\r\n    rows: 30,\r\n    cols: 16,\r\n    numBombs: 99,\r\n};\r\n\r\nconst StatusBar = (\r\n    props,\r\n) => {\r\n\r\n    return <StatusBarWrapper>\r\n        <Timer />\r\n        <RemainingBombs>{props.game.remaining}</RemainingBombs>\r\n\r\n        <ModeWrapper >\r\n            <FontAwesomeIcon\r\n                size='2x'\r\n                icon={props.gameMode === 'flagging' ? faFlag : faMousePointer}\r\n                onClick={\r\n                    () => {\r\n                        props.toggleGameMode();\r\n                    }\r\n                }\r\n            />\r\n        </ModeWrapper>\r\n        <div className='dropdown'>\r\n            <FontAwesomeIcon\r\n                onClick={() => {\r\n                    const curr = document.getElementById('dropdown-menu').style.display;\r\n                    document.getElementById('dropdown-menu').style.display = curr === 'block' ? 'none' : 'block';\r\n                }}\r\n                className='dropdown'\r\n                icon={faCog}\r\n                size='2x'\r\n            />\r\n            <div id='dropdown-menu' className='dropdown-content'>\r\n                <FontAwesomeIcon\r\n                    icon={faTimes}\r\n                    style={{ position: 'absolute', right: '5' }}\r\n                    onClick={() => {\r\n                        document.getElementById('dropdown-menu').style.display = 'none';\r\n                    }}\r\n                />\r\n                <div>\r\n                    <p>Game Difficulty:</p>\r\n                    <div>\r\n                        <input type='radio' id='easy' name='gameDifficulty' value='easy' />\r\n                        <label htmlFor='easy'>Easy (9 x 9, 10 mines) </label>\r\n                    </div>\r\n                    <div>\r\n                        <input type='radio' id='medium' name='gameDifficulty' value='medium' />\r\n                        <label htmlFor='medium'>Medium (16 x 16, 40 mines)</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type='radio' id='hard' name='gameDifficulty' value='hard' />\r\n                        <label htmlFor='hard'>Hard (16 x 30, 99 mines)</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <FontAwesomeIcon size='2x' icon={faRedo} onClick={() => {\r\n            console.log(props);\r\n            props.localRemoveCachedBoard();\r\n\r\n            const gameDifficultySelector = document.querySelectorAll('input[name=\\'gameDifficulty\\']');\r\n            let selectedValue;\r\n            for (const difficultyOption of gameDifficultySelector) {\r\n                if (difficultyOption.checked) {\r\n                    selectedValue = difficultyOption.value;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let gameDifficulty = EasyDifficulty;\r\n\r\n            if (selectedValue === 'medium') {\r\n                gameDifficulty = MediumDifficulty;\r\n            } else if (selectedValue === 'hard') {\r\n                gameDifficulty = HardDifficulty;\r\n            }\r\n\r\n            props.setGameDifficulty(gameDifficulty);\r\n\r\n        }} />\r\n    </StatusBarWrapper>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    // isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    // rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(StatusBar);","export const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const initializeBoard = (game) => ({\r\n    type: INITIALIZE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const updateBoard = (game) => ({\r\n    type: UPDATE_BOARD,\r\n    payload: { game },\r\n});\r\n\r\n\r\nexport const REMOVE_CACHED_BOARD = 'REMOVE_CACHED_BOARD';\r\nexport const removeCachedBoard = () => ({\r\n    type: REMOVE_CACHED_BOARD,\r\n    payload: { },\r\n});\r\n\r\nexport const INITILIZE_TIMER = 'INITILIZE_TIMER';\r\nexport const initializeTimer = (startTime) => ({\r\n    type: INITILIZE_TIMER,\r\n    payload: {startTime},\r\n});\r\n\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const updateTimer = (now) => ({\r\n    type: UPDATE_TIMER,\r\n    payload: {now},\r\n});\r\n\r\nexport const TOGGLE_GAME_MODE = 'TOGGLE_GAME_MODE';\r\nexport const toggleGameMode = (now) => ({\r\n    type: TOGGLE_GAME_MODE,\r\n    payload: {now},\r\n});\r\n\r\nexport const SET_GAME_DIFFICULTY = 'SET_GAME_DIFFICULTY';\r\nexport const setGameDifficulty = (difficulty) => ({\r\n    type: SET_GAME_DIFFICULTY,\r\n    payload: {difficulty},\r\n});","/* eslint-disable no-undef */\r\nimport React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport GameDisplay from './GameDisplay';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n    <div className=\"App-Wrapper\">\r\n        <div className=\"App\">\r\n            <GameDisplay />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default hot(module)(App);","export const getBoard = (state) => {\r\n    return state.data.board;\r\n};\r\n\r\nexport const plsRerender = (state) => {\r\n    return state.data.shouldRerender;\r\n};\r\n\r\nexport const getGame = (state) => {\r\n    return state.data.game;\r\n};\r\n\r\nexport const getIsSet = (state) => {\r\n    return state.data.isSet;\r\n};\r\n\r\nexport const getStartTime = (state) => {\r\n    return state.data.startTime;\r\n};\r\n\r\nexport const getCurrentTime = (state) => {\r\n    return state.data.now;\r\n};\r\n\r\nexport const getGameMode = (state) => {\r\n    return state.data.gameMode;\r\n};\r\n\r\nexport const getGameDifficulty = (state) => {\r\n    return state.data.difficulty;\r\n};","/* eslint-disable max-len */\r\nexport const BOMB_TILE = 'https://apprecs.org/ios/images/app-icons/256/e7/451931111.jpg';\r\nexport const HINT_TILES = [\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Minesweeper_0.svg/2000px-Minesweeper_0.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Minesweeper_1.svg/2000px-Minesweeper_1.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Minesweeper_2.svg/2000px-Minesweeper_2.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Minesweeper_3.svg/2000px-Minesweeper_3.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Minesweeper_4.svg/2000px-Minesweeper_4.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Minesweeper_5.svg/2000px-Minesweeper_5.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Minesweeper_6.svg/2000px-Minesweeper_6.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Minesweeper_7.svg/2000px-Minesweeper_7.svg.png',\r\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Minesweeper_8.svg/2000px-Minesweeper_8.svg.png',\r\n];\r\n\r\nexport const FLAG_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Minesweeper_flag.svg/2000px-Minesweeper_flag.svg.png';\r\nexport const UNOPENED_TILE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Minesweeper_unopened_square.svg/1024px-Minesweeper_unopened_square.svg.png';","/* eslint-disable complexity */\r\n/* eslint-disable func-style */\r\n\r\nimport styled from 'styled-components';\r\nimport { BOMB_TILE, HINT_TILES, FLAG_TILE, UNOPENED_TILE } from './ImageUrls';\r\n\r\nconst BombImage = function () {\r\n    this.url = BOMB_TILE;\r\n};\r\n\r\nconst OpenedImage = function (numBombs) {\r\n    this.url = HINT_TILES[numBombs];\r\n};\r\n\r\nconst FlaggedImage = function () {\r\n    this.url = FLAG_TILE;\r\n};\r\n\r\nconst UnopenedImage = function () {\r\n    this.url = UNOPENED_TILE;\r\n};\r\n\r\nfunction TileImageFactory() {\r\n    this.createImage = function (tile) {\r\n        let image;\r\n\r\n        if (tile.isOpened && tile.type === 'bomb') {\r\n            image = new BombImage();\r\n        } else if (tile.isOpened) {\r\n            image = new OpenedImage(tile.numBombs);\r\n        } else if (tile.isFlagged) {\r\n            image = new FlaggedImage();\r\n        } else {\r\n            image = new UnopenedImage();\r\n        }\r\n\r\n        return image.url;\r\n    };\r\n}\r\n\r\nconst timeImageFactory = new TileImageFactory();\r\n\r\nconst TileImage = styled.div`\r\ncontent: url(${(props) => {\r\n        return timeImageFactory.createImage(props.tile);\r\n    }});\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nexport default TileImage;","/* eslint-disable func-style */\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport TileImage from './TileImageFactory';\r\n\r\nconst TileWrapper = styled.div`\r\n    position:relative;\r\n    width: 50px;\r\n    height: 50px;\r\n`;\r\n\r\nconst Tile = ({ tile, gameMode, click }) => {\r\n    return <TileWrapper\r\n        onClick={() => {\r\n            click(tile);\r\n        }}>\r\n\r\n        <TileImage style={{ position: 'absolute' }} tile={tile} />\r\n        <FontAwesomeIcon size='2x' style={{\r\n            display: `${gameMode === 'flagging' && !tile.isOpened && !tile.isFlagged ? '' : 'none'}`,\r\n            zIndex: '20',\r\n            position: 'absolute',\r\n            left: '10',\r\n            top: '10',\r\n            opacity: '.6'\r\n        }} icon={faFlag} />\r\n    </TileWrapper>;\r\n};\r\n\r\nexport default Tile;","/* eslint-disable complexity */\r\nimport { shuffle } from './utils';\r\n\r\nconst bombTile = {\r\n    type: 'bomb',\r\n};\r\n\r\nconst safeTile = {\r\n    type: 'safe',\r\n};\r\n\r\nfunction isBomb(tile) {\r\n    return tile.type === 'bomb';\r\n}\r\n\r\nclass MinesweeperGame {\r\n    constructor(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = numBombs;\r\n        this.nonBombs = (rows * cols) - numBombs;\r\n        this.remaining = (rows * cols) - numBombs;\r\n        this.opened = new Set();\r\n        if (this.bombs === 0) {\r\n            this.board = genNonBombs(rows * cols);\r\n        } else {\r\n            this.board = this.createBoard(gameDifficulty, initialClick);\r\n            this.clickTile(this.board[initialClick]);\r\n        }\r\n    }\r\n\r\n    createBoard(gameDifficulty, initialClick) {\r\n        const { rows, cols, numBombs } = gameDifficulty;\r\n\r\n        const pos = this.indexToPos(initialClick, cols);\r\n        const totalTiles = rows * cols;\r\n        const bombs = genBombs(numBombs);\r\n\r\n        let numSafe = 9;\r\n\r\n        if (this.isCorner(pos, rows, cols)) {\r\n            numSafe = 4;\r\n        } else if (this.isOnAnEdge(pos, rows, cols)) {\r\n            numSafe = 6;\r\n        }\r\n\r\n        const randomSafe = genNonBombs(totalTiles - numSafe - numBombs, safeTile);\r\n        const randomizeBoard = shuffle(bombs.concat(randomSafe));\r\n\r\n        const finishedBoard = [...Array(rows)].map(() => Array(cols).fill(0));\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            finishedBoard[coords.y][coords.x] = safeTile;\r\n        });\r\n\r\n        let index = 0;\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!finishedBoard[row][col]) {\r\n                finishedBoard[row][col] = randomizeBoard[index];\r\n                index++;\r\n            }\r\n\r\n            finishedBoard[row][col] = {\r\n                ...finishedBoard[row][col],\r\n                index: this.posToArrIndex({ x: col, y: row }, cols),\r\n                numBombs: 0,\r\n            };\r\n        });\r\n\r\n\r\n        this.calculateBombNumberForEachTile(finishedBoard, rows, cols);\r\n\r\n        return [].concat(...finishedBoard);\r\n    }\r\n\r\n    iterateOverNeighbors(pos, callback) {\r\n        for (let xDelta = -1; xDelta <= 1; xDelta++) {\r\n            for (let yDelta = -1; yDelta <= 1; yDelta++) {\r\n                const coords = { x: pos.x + xDelta, y: pos.y + yDelta };\r\n                if (coords.x < 0 || coords.x >= this.cols) {\r\n                    continue;\r\n                }\r\n                if (coords.y < 0 || coords.y >= this.rows) {\r\n                    continue;\r\n                }\r\n                callback(coords);\r\n            }\r\n        }\r\n    }\r\n\r\n    iterateOverRowsCols(callback) {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.cols; col++) {\r\n                callback(row, col);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateBombNumberForEachTile(finishedBoard, rows, cols) {\r\n        this.iterateOverRowsCols((row, col) => {\r\n            if (!isBomb(finishedBoard[row][col])) {\r\n                return;\r\n            }\r\n            const pos = { x: col, y: row };\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                finishedBoard[coords.y][coords.x].numBombs += 1;\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    posToArrIndex(pos, cols) {\r\n        return pos.y * cols + pos.x;\r\n    }\r\n\r\n    isCorner(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) === 2;\r\n    }\r\n\r\n    numEdgesOfPos(pos, rows, cols) {\r\n        const left = pos.y === 0;\r\n        const right = pos.y === cols - 1;\r\n        const top = pos.x === 0;\r\n        const bottom = pos.x === rows - 1;\r\n\r\n        let total = 0;\r\n        if (left || right) total++;\r\n        if (top || bottom) total++;\r\n\r\n        return total;\r\n    }\r\n\r\n    isOnAnEdge(pos, rows, cols) {\r\n        return this.numEdgesOfPos(pos, rows, cols) > 0;\r\n    }\r\n\r\n\r\n\r\n    indexToPos(index, cols) {\r\n        const y = Math.trunc(index / cols);\r\n        const x = index - y * cols;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    // setupGame(initialClick) {\r\n    //     return createBoard(10, 10, 15, this.indexToPos(initialClick));\r\n    // }\r\n\r\n    clickTile(tile) {\r\n        this.openNonBombNeighbors(tile);\r\n    }\r\n\r\n    flagTile(tile) {\r\n        const curr = this.board[tile.index];\r\n        const flaggedState = curr.isFlagged;\r\n        curr.isFlagged = !flaggedState;\r\n    }\r\n\r\n    indexWithinBounds(index) {\r\n        return index >= 0 && index < this.rows * this.cols;\r\n    }\r\n\r\n    isFlagged(index) {\r\n        return this.board[index].isFlagged;\r\n    }\r\n\r\n    neighborsWithFlags(tile) {\r\n        let numFlagged = 0;\r\n        this.iterateOverNeighbors(this.indexToPos(tile.index, this.cols), (coords) => {\r\n            const index = this.posToArrIndex(coords, this.cols);\r\n            if (this.isFlagged(index)) {\r\n                numFlagged++;\r\n            }\r\n        });\r\n\r\n        return numFlagged;\r\n    }\r\n\r\n    openNeighbors(tileToOpen) {\r\n        const numFlagged = this.neighborsWithFlags(tileToOpen);\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n\r\n        if (numFlagged === tileToOpen.numBombs) {\r\n\r\n            this.iterateOverNeighbors(pos, (coords) => {\r\n                const index = this.posToArrIndex(coords, this.cols);\r\n\r\n                if (this.indexWithinBounds(index)) {\r\n                    const tile = this.board[index];\r\n                    if (this.isFlagged(index)) {\r\n                        return;\r\n                    }\r\n                    if (tile.isOpened) {\r\n                        return;\r\n                    }\r\n                    this.clickTile(tile);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    decrementUsed(index) {\r\n        if (!this.opened.has(index)) {\r\n            this.remaining--;\r\n        }\r\n        this.opened.add(index);\r\n        if (this.opened.size === this.nonBombs) {\r\n            alert('WIN!');\r\n        }\r\n    }\r\n\r\n    openNonBombNeighbors(tileToOpen) {\r\n        if (tileToOpen.type === 'bomb') {\r\n            alert('loss!');\r\n            return;\r\n        }\r\n        const pos = this.indexToPos(tileToOpen.index, this.cols);\r\n        if (tileToOpen.isOpened) {\r\n            return;\r\n        }\r\n        this.board[tileToOpen.index].isOpened = true;\r\n\r\n        this.decrementUsed(tileToOpen.index);\r\n\r\n        if (tileToOpen.numBombs && tileToOpen.numBombs > 0) {\r\n            return;\r\n        }\r\n\r\n        this.iterateOverNeighbors(pos, (coords) => {\r\n            const tileToOpen = this.board[this.posToArrIndex(coords, this.cols)];\r\n            if (isBomb(tileToOpen)) {\r\n                return;\r\n            }\r\n\r\n            this.openNonBombNeighbors(tileToOpen);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction genNonBombs(numTiles, includeIndex, toInsert) {\r\n    const tiles = [];\r\n\r\n\r\n    for (let count = 0; count < numTiles; count++) {\r\n        tiles.push({\r\n            ...toInsert,\r\n            index: count,\r\n        });\r\n    }\r\n\r\n    return tiles;\r\n}\r\n\r\nfunction genBombs(numBombs) {\r\n    const bombs = [];\r\n\r\n    for (let count = 0; count < numBombs; count++) {\r\n        bombs.push(bombTile);\r\n    }\r\n\r\n    return bombs;\r\n}\r\n\r\nexport default MinesweeperGame;","export function shuffle(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport Tile from './Minesweeper/Tile';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n    getBoard,\r\n    getIsSet,\r\n    getGame,\r\n    plsRerender,\r\n    getGameMode,\r\n    getGameDifficulty,\r\n\r\n} from './selectors';\r\nimport { initializeBoard, updateBoard, removeCachedBoard, initializeTimer, updateTimer, toggleGameMode, setGameDifficulty } from './actions';\r\n\r\nimport MinesweeperGame from './Minesweeper/Minesweeper';\r\n// import { isBomb } from './Minesweeper/Tile';\r\nimport './Game.css';\r\nimport { EasyDifficulty } from './StatusBar';\r\n\r\nlet stop = false;\r\nlet emptyBoard = null;\r\n\r\nlet first = true;\r\nconst secondInMilli = 1000;\r\n\r\nconst Game = ({\r\n    // state\r\n    board, game, isSet, gameMode, gameDifficulty,\r\n    // actions\r\n    performInitialSetup, updateBoard, setStartTime, updateTimer, toggleGameMode,\r\n}) => {\r\n\r\n\r\n    const GameWrapper = styled.div`\r\n        display: inline-grid;\r\n        grid-template-columns: repeat(${gameDifficulty.cols},1fr);\r\n    `;\r\n\r\n    emptyBoard = new MinesweeperGame({\r\n        ...gameDifficulty,\r\n        numBombs: 0,\r\n    }, null);\r\n\r\n    if (first && isSet) {\r\n        window.addEventListener('keydown', (event) => {\r\n            if (event.key === 'F' || event.key === 'f') {\r\n                toggleGameMode();\r\n            }\r\n        }, false);\r\n        first = false;\r\n    }\r\n    const visibleBoard = isSet ? board : emptyBoard.board;\r\n\r\n\r\n    const initialTileClick = (tile) => {\r\n        stop = false;\r\n        const newGame = new MinesweeperGame(gameDifficulty, tile.index);\r\n        performInitialSetup(newGame);\r\n        const timerInterval = setInterval(() => {\r\n            updateTimer(new Date());\r\n            if (stop) {\r\n                clearInterval(timerInterval);\r\n            }\r\n        }, secondInMilli);\r\n\r\n        setStartTime(new Date(), timerInterval);\r\n    };\r\n\r\n    const bombClick = () => {\r\n        console.log('LOSS!');\r\n    };\r\n\r\n    const unopenedTileClick = (tile) => {\r\n        game.clickTile(tile);\r\n        updateBoard(game.board);\r\n    };\r\n\r\n    const flagClick = (tile) => {\r\n        game.flagTile(tile);\r\n        updateBoard(game.board);\r\n    };\r\n\r\n    const openNeighbors = (tile) => {\r\n        game.openNeighbors(tile);\r\n        updateBoard(game.board);\r\n    };\r\n\r\n    function isClicked(tile) {\r\n        if (tile && tile.isOpened) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return <div>\r\n        <GameWrapper>\r\n            {\r\n                visibleBoard.map((tile) => {\r\n                    return <Tile\r\n                        key={tile.index}\r\n                        tile={tile}\r\n                        gameMode={gameMode}\r\n                        click={\r\n                            (tile) => {\r\n                                if (!isSet) {\r\n                                    initialTileClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (isClicked(tile)) {\r\n                                    openNeighbors(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (gameMode === 'flagging') {\r\n                                    flagClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                if (tile.isFlagged) {\r\n                                    return;\r\n                                }\r\n                                if (tile.type === 'bomb') {\r\n                                    bombClick(tile);\r\n                                    return;\r\n                                }\r\n\r\n                                unopenedTileClick(tile);\r\n                            }\r\n                        }\r\n                    />;\r\n                })\r\n            }\r\n        </GameWrapper>\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    board: getBoard(state),\r\n    isSet: getIsSet(state),\r\n    game: getGame(state),\r\n    rerender: plsRerender(state),\r\n    gameMode: getGameMode(state),\r\n    gameDifficulty: getGameDifficulty(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    performInitialSetup: (newGame) => dispatch(initializeBoard(newGame)),\r\n    updateBoard: (tile) => dispatch(updateBoard(tile)),\r\n    removeCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setStartTime: (startTime, interval) => dispatch(initializeTimer(startTime, interval)),\r\n    updateTimer: (now) => dispatch(updateTimer(now)),\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(setGameDifficulty(newDifficulty)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","/* eslint-disable react/prop-types */\r\n/* eslint-disable complexity */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { removeCachedBoard, toggleGameMode, setGameDifficulty } from './actions';\r\nimport './Game.css';\r\nimport StatusBar from './StatusBar';\r\n\r\n\r\nimport Game from './Game';\r\n\r\nconst GameDisplay = ({\r\n    localRemoveCachedBoard, setDifficulty, toggleGameMode,\r\n}) => {\r\n\r\n    return <div>\r\n        <StatusBar toggleGameMode={toggleGameMode} localRemoveCachedBoard={localRemoveCachedBoard} setGameDifficulty={setDifficulty} />\r\n        <Game />\r\n    </div>;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleGameMode: () => dispatch(toggleGameMode()),\r\n    localRemoveCachedBoard: () => dispatch(removeCachedBoard()),\r\n    setDifficulty: (newDifficulty) => dispatch(setGameDifficulty(newDifficulty)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(GameDisplay);","/* eslint-disable complexity */\r\nimport {\r\n    INITIALIZE_BOARD,\r\n    REMOVE_CACHED_BOARD,\r\n    UPDATE_BOARD,\r\n    INITILIZE_TIMER,\r\n    UPDATE_TIMER,\r\n    TOGGLE_GAME_MODE,\r\n    SET_GAME_DIFFICULTY\r\n} from './actions';\r\n\r\nimport { EasyDifficulty } from './StatusBar';\r\n\r\nconst initialState = { difficulty: EasyDifficulty, game: { board: [], isSet: false } };\r\n\r\nexport const data = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case INITIALIZE_BOARD: {\r\n            const { game } = payload;\r\n            const board = game.board;\r\n\r\n            return {\r\n                ...state,\r\n                game: game,\r\n                board: board,\r\n                isSet: true,\r\n                update: 0,\r\n                shouldRerender: 0,\r\n                now: null,\r\n                startTime: null,\r\n                gameMode: 'clicking',\r\n                timerInterval: null,\r\n            };\r\n        }\r\n\r\n        case UPDATE_BOARD: {\r\n            const { game } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                shouldRerender: state.shouldRerender + 1,\r\n                board: game,\r\n            };\r\n        }\r\n\r\n        case INITILIZE_TIMER: {\r\n            const { startTime, timerInterval } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                now: startTime,\r\n                startTime: startTime,\r\n                timerInterval: timerInterval,\r\n            };\r\n        }\r\n\r\n        case UPDATE_TIMER: {\r\n            const { now } = payload;\r\n\r\n            return {\r\n                ...state,\r\n                now: now,\r\n            };\r\n        }\r\n\r\n        case REMOVE_CACHED_BOARD: {\r\n\r\n            return {\r\n                ...state,\r\n                timerInterval: null,\r\n                now: null,\r\n                isSet: false,\r\n                startTime: null,\r\n                game: {\r\n                    board: []\r\n                },\r\n                difficulty: EasyDifficulty,\r\n            };\r\n        }\r\n        case TOGGLE_GAME_MODE: {\r\n            const newMode = state.gameMode === 'clicking' ? 'flagging' : 'clicking';\r\n\r\n            return {\r\n                ...state,\r\n                gameMode: newMode,\r\n            };\r\n        }\r\n        case SET_GAME_DIFFICULTY: {\r\n            const { difficulty } = payload;\r\n            return {\r\n                ...state,\r\n                difficulty: difficulty,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { data } from './reducers';\r\n\r\nconst reducers = {\r\n    data,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () =>\r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import App from './App.js';\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport App from './App.js';\r\n\r\n\r\nconst store = configureStore();\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate\r\n            loading={<div>Loading...</div>}\r\n            persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));"],"sourceRoot":""}